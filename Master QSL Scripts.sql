SELECT SH_ORDER, SH_CUST, SH_NOTE_1, SH_NOTE_2 , SH_NUM_LINES,SH_SPARE_DBL_9, SH_ADD_DATE,SH_ADD_TIME, SH_LAST_PICK_NUM, SH_STATUS, Count(ROWNUM) AS "NumberOfOrders",SD_STOCK,SD_QTY_ORDER,IM_STOCK, IL_IN_LOCN, NI_LOCN, NI_QUANTITY,NI_AVAIL_ACTUAL, NI_STATUS, NI_STRENGTH, IM_DESC, NI_DATE, NI_MADE_DATE, NI_QUARANTINED, NI_ENTRY, NI_QJ_NUMBER, NI_QD_DES_SEQ, NI_TRAN_TYPE, NI_ID
FROM NI, IM, IL, SH, SD
WHERE  (NI_AVAIL_ACTUAL > 1) AND ((NI_STATUS = 1) OR (NI_STATUS = 2))
AND NI_STOCK = IM_STOCK
AND SH_ORDER = SD_ORDER
AND NI_LOCN = IL_LOCN
AND IM_STOCK = SD_STOCK
AND SH_ADD_DATE >= '1-Jul-2013' AND SH_ADD_DATE <= '11-Jul-2013'
AND SH_STATUS = 0 AND SD_STATUS = 0
GROUP BY SH_ORDER, SH_CUST, SH_NOTE_1, SH_NOTE_2 , SH_NUM_LINES,SH_SPARE_DBL_9, SH_ADD_DATE,SH_ADD_TIME, SH_LAST_PICK_NUM, SH_STATUS, ROWNUM,SD_STOCK,SD_QTY_ORDER,IM_STOCK, IL_IN_LOCN, NI_LOCN, NI_QUANTITY,NI_AVAIL_ACTUAL, NI_STATUS, NI_STRENGTH, IM_DESC, NI_DATE, NI_MADE_DATE, NI_QUARANTINED, NI_ENTRY, NI_QJ_NUMBER, NI_QD_DES_SEQ, NI_TRAN_TYPE, NI_ID


var cust varchar2(20)
exec :cust := 'TABCORP'
/*Used for getting EOM storage lines*/           OK as of Nov 2012    */


SELECT DISTINCT l.IL_LOCN, Count(n1.NI_STOCK) AS "LocnCount",l.IL_NOTE_2,
                  CASE   WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN 'Pallet Fee is for stocks ' ||  i2.IM_STOCK
                        WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2 NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN 'Shelf Fee is '  ||  i2.IM_STOCK
                        ELSE ''
                        END AS "FeeDescription",
                  CASE   WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN '' || (Select RM_XX_FEE11 from RM where RM_CUST = :cust  ) / Count(n1.NI_STOCK)
                        WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2  NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN '' || (Select RM_XX_FEE12 from RM where RM_CUST = :cust ) / Count(n1.NI_STOCK)
                        ELSE ''
                        END AS "Fee" , Sum(n1.NI_AVAIL_ACTUAL) AS "TotalAvail"
FROM PWIN175.IL l
 RIGHT OUTER JOIN PWIN175.NI n1 ON n1.NI_LOCN = l.IL_LOCN
 INNER JOIN PWIN175.IM i2 ON i2.IM_STOCK = n1.NI_STOCK
WHERE   n1.NI_AVAIL_ACTUAL >= '1'
--AND i2.IM_CUST = :cust
AND l.IL_LOCN IN (

                  SELECT  n2.NI_LOCN
                  FROM    PWIN175.NI n2 --INNER JOIN PWIN175.IM i ON i.IM_STOCK = n2.NI_STOCK
                  WHERE   n2.NI_AVAIL_ACTUAL >= '1'
                 -- AND i.IM_CUST = :cust
                  AND n2.NI_LOCN = 'MR340A'
                  AND n2.NI_STOCK IN (
                                      SELECT i3.IM_STOCK FROM PWIN175.IM i3 WHERE i3.IM_CUST = :cust
                                      )
                 )

GROUP BY l.IL_LOCN, l.IL_NOTE_2, i2.IM_STOCK
ORDER BY l.IL_LOCN



SELECT l.IL_LOCN, Count(i.IM_STOCK) AS "LocnCount",i.IM_STOCK,
                  CASE  WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN 'Pallet Fee is for stocks ' ||  i.IM_STOCK
                        WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2 NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN 'Shelf Fee is '  ||  i.IM_STOCK
                        ELSE ''
                        END AS "FeeDescription",
                  CASE  WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN '' || (Select RM_XX_FEE11 from RM where RM_CUST = :cust  ) / Count(n1.NI_STOCK)
                        WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2  NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN '' || (Select RM_XX_FEE12 from RM where RM_CUST = :cust ) / Count(n1.NI_STOCK)
                        ELSE ''
                        END AS "Fee" , Sum(n1.NI_AVAIL_ACTUAL) AS "TotalAvail"
FROM PWIN175.NI n1
 INNER JOIN PWIN175.IM i ON i.IM_STOCK = n1.NI_STOCK
 LEFT OUTER JOIN PWIN175.IL l ON l.IL_LOCN = n1.NI_LOCN
 INNER JOIN PWIN175.RM r ON R.RM_CUST = i.IM_CUST
 INNER JOIN PWIN175.I l2 ON l2.IL_LOCN = l.IL_LOCN
WHERE   n1.NI_AVAIL_ACTUAL >= '1'
AND l.IL_LOCN = l2.IL_LOCN
AND i.IM_CUST = :cust

GROUP BY i.IM_STOCK,l.IL_LOCN, l.IL_NOTE_2
--
AND l.IL_LOCN IN (

                  SELECT  n2.NI_LOCN
                  FROM    PWIN175.NI n2 --INNER JOIN PWIN175.IM i ON i.IM_STOCK = n2.NI_STOCK
                  WHERE   n2.NI_AVAIL_ACTUAL >= '1'
                 -- AND i.IM_CUST = :cust
                  AND n2.NI_LOCN = 'MR340A'
                  AND n2.NI_STOCK IN (
                                      SELECT i3.IM_STOCK FROM PWIN175.IM i3 WHERE i3.IM_CUST = :cust
                                      )
                 )

GROUP BY i2.IM_STOCK, l.IL_NOTE_2
ORDER BY l.IL_LOCN









SELECT  NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST, IL_NOTE_2 , Sum(NE_AVAIL_ACTUAL) AS "TotalSOH", Count(IL_LOCN) AS "NumOfLocns",
NI_DATE, NE_DATE,NE_STATUS,NE_ERA, NE_STRENGTH, NI_AVAIL_ACTUAL, NI_LOCN, NE_STOCK, NE_QUANTITY, NE_ACCOUNT,NE_NA_EXT_KEY, NE_NV_EXT_TYPE,NE_NV_EXT_KEY,NE_MOVEMENT,
  CASE   WHEN IL.IL_NOTE_2 like 'Yes' THEN 'Pallet Fee is '
         WHEN IL.IL_NOTE_2 NOT like 'No'  THEN 'Shelf Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN IL.IL_NOTE_2 like 'Yes' THEN '' || (Select RM_XX_FEE11 from RM where RM_CUST = 'RTA')
         WHEN IL.IL_NOTE_2 NOT like 'No' THEN  '' || (Select RM_XX_FEE12 from RM where RM_CUST = 'RTA')
         ELSE ''
         END AS "Fee"
FROM PWIN175.NI, PWIN175.NE, PWIN175.IL, PWIN175.IM , PWIN175.RM r
WHERE IL_LOCN = NI_LOCN
AND NI_ENTRY = NE_ENTRY
AND NI_STOCK = IM_STOCK
AND RM_CUST = IM_CUST
--WHERE r.RM_SOURCE = :source
AND RM_CUST = 'RTA'
AND IM_STOCK IN (
                  SELECT  n.NI_STOCK
                  FROM PWIN175.NI n --INNER JOIN PWIN175.IL l ON l.IL_LOCN = n.NI_LOCN
                  WHERE n.NI_AVAIL_ACTUAL >= '1'
                )
GROUP BY NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST,IL_NOTE_2,NI_DATE,
NE_DATE,NE_STATUS,NE_ERA, NE_STRENGTH, NI_AVAIL_ACTUAL, NI_LOCN, NE_STOCK, NE_QUANTITY, NE_ACCOUNT,NE_NA_EXT_KEY, NE_NV_EXT_TYPE,NE_NV_EXT_KEY,NE_MOVEMENT, NE_PRICE_ENTRY, NE_COST_ENTRY,IL_NOTE_2

ORDER BY NI_LOCN, IM_STOCK


SELECT  NE_AVAIL_ACTUAL
FROM PWIN175.NI, PWIN175.NE, PWIN175.IL, PWIN175.IM , PWIN175.RM r
WHERE IL_LOCN = NI_LOCN
AND NI_ENTRY = NE_ENTRY
AND NI_STOCK = IM_STOCK
AND RM_CUST = IM_CUST
--WHERE r.RM_SOURCE = :source
AND RM_CUST = 'RTA'
AND IM_STOCK IN (
                  SELECT  n.NI_STOCK
                  FROM PWIN175.NI n --INNER JOIN PWIN175.IL l ON l.IL_LOCN = n.NI_LOCN
                  WHERE n.NI_AVAIL_ACTUAL >= '1'
                )
GROUP BY NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST,IL_NOTE_2,NI_DATE,
NE_DATE,NE_STATUS,NE_ERA, NE_STRENGTH, NI_AVAIL_ACTUAL, NI_LOCN, NE_STOCK, NE_QUANTITY, NE_ACCOUNT,NE_NA_EXT_KEY, NE_NV_EXT_TYPE,NE_NV_EXT_KEY,NE_MOVEMENT, NE_PRICE_ENTRY, NE_COST_ENTRY,IL_NOTE_2

ORDER BY NI_LOCN, IM_STOCK







SELECT  l.IL_LOCN,
        l.IL_NOTE_2,
        null,
        Sum(e.NE_AVAIL_ACTUAL) AS "TotalSOH",
        Count(n.NI_STOCK) AS "LocationCount"
        --a.NA_EXT_TYPE
        ,
       CASE   WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN 'Pallet Fee is for stocks ' ||  i.IM_STOCK
              WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2 NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN 'Shelf Fee is '  ||  i.IM_STOCK
              ELSE ''
              END AS "FeeDescription",
        CASE   WHEN l.IL_NOTE_2 like 'Yes' OR l.IL_NOTE_2 LIKE 'YES' OR l.IL_NOTE_2 LIKE 'yes' THEN '' || (Select RM_XX_FEE11 from RM where RM_CUST = :cust  ) --/ Count(n1.NI_STOCK)
              WHEN l.IL_NOTE_2 NOT like 'No' OR l.IL_NOTE_2  NOT LIKE 'YES' OR l.IL_NOTE_2 NOT LIKE 'yes' THEN '' || (Select RM_XX_FEE12 from RM where RM_CUST = :cust ) --/ Count(n1.NI_STOCK)
              ELSE ''
              END AS "Fee"
FROM    IM i  --,IL l, NE e, NI n, NA a
        INNER JOIN NE e ON e.NE_STOCK = i.IM_STOCK
        INNER JOIN NI n ON n.NI_ENTRY = e.NE_ENTRY --AND a.NA_EXT_TYPE = 1810105
        INNER JOIN IL l ON l.IL_LOCN = n.NI_LOCN
        INNER JOIN RM r ON r.RM_CUST = i.IM_CUST
WHERE   e.NE_AVAIL_ACTUAL >= '1'
AND     RM_CUST = :cust
GROUP BY  l.IL_LOCN, l.IL_NOTE_2, i.IM_STOCK,e.NE_AVAIL_ACTUAL


SELECT   n.NI_LOCN, Count(n.NI_STOCK) "StockNum"
FROM NI n
WHERE   n.NI_AVAIL_ACTUAL >= '1'
AND n.NI_STOCK IN (SELECT i.IM_STOCK FROM IM i WHERE i.IM_CUST = :cust AND i.IM_STOCK = n.NI_STOCK )
AND n.NI_LOCN IS NOT NULL
GROUP BY  n.NI_LOCN , n.NI_STOCK

UNION ALL

SELECT   n2.NI_STOCK, n2.NI_LOCN, Count(n2.NI_STOCK) "StockNum"
FROM NI n2
WHERE   n2.NI_AVAIL_ACTUAL >= '1'
AND n2.NI_STOCK IN (SELECT i2.IM_STOCK FROM IM i2 WHERE i2.IM_CUST = :cust AND i2.IM_STOCK = n2.NI_STOCK )
AND n2.NI_LOCN IS NOT NULL
GROUP BY  n2.NI_STOCK,n2.NI_LOCN



-- NE Table is the new INVENTORY Table for PrismIQ v 2010.9.2
-- All AUTOMATED TRANSACTIONS will have a corresponding NE
SELECT * FROM pwin175.NE
WHERE NE_ADD_DATE > = '10-APR-2011'



-- IT Table is another INVENTORY Table for PrismIQ v 2010.9.2
-- All MANUAL TRANSACTIONS (Transfer, Stocktake, Manual Receipts) will have a corresponding IT
SELECT * FROM pwin175.IT
WHERE IT_ADD_DATE > = '10-APR-2011'



/* GOOD ONE FOR JASON DESPATCHES WITH COUNTS */
USE PWIN171
SELECT ST_ORDER, SH_CUST, ST_PICK, ST_DESP_DATE, COUNT(*) AS "NUMLINE"
FROM ST, SD, SH
WHERE SD_ORDER = SH_ORDER
/* AND LTRIM(RTRIM(ST_ORDER)) = '202759'  */
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
/* AND SD_LAST_PSLIP_NUM <> '' */
/* AND SH_CUST NOT LIKE('01-9%') */
AND SH_CUST <> '01-990200'
AND SH_CUST <> '01-910001'
AND SD_STOCK NOT LIKE('CPL%')
AND SD_STOCK NOT LIKE ('FREIGHT%')
AND SD_STOCK <> 'ORDER'
AND ST_DESP_DATE >= '01-JUL-06'
/* AND ST_DESP_DATE < '03-JUL-07' */
AND ST_DESP_DATE <= '31-MAR-07'
GROUP BY ST_PICK, ST_ORDER, SH_CUST, ST_DESP_DATE
ORDER BY ST_DESP_DATE

/* GOOD ONE FOR JASON DESPATCHES WITH COUNTS */
USE PWIN171
SELECT SD_STOCK, ST_DESP_DATE, COUNT(*) AS "NUMLINE"
FROM ST, SD, SH
WHERE SD_ORDER = SH_ORDER
/* AND SD_LAST_PSLIP_NUM = ST_PSLIP */
/* AND LTRIM(RTRIM(ST_ORDER)) = '202759'  */
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
/* AND SD_LAST_PSLIP_NUM <> '' */
/* AND SH_CUST NOT LIKE('01-9%') */
AND SH_CUST LIKE '01-CML%'
AND SD_STOCK NOT LIKE('CPL%')
AND SD_STOCK NOT LIKE ('FREIGHT%')
AND SD_STOCK <> 'ORDER'
AND ST_DESP_DATE >= '01-JAN-05'
/* AND ST_DESP_DATE < '03-JUL-07' */
AND ST_DESP_DATE <= '31-MAR-05'
GROUP BY SD_STOCK, ST_PICK, ST_ORDER, SH_CUST, ST_DESP_DATE
ORDER BY ST_DESP_DATE


SELECT DISTINCT SD_STOCK, SUM(SL_PSLIP_QTY) "QTY DESP",
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 1 THEN 1 ELSE 0 END) AS [Jan],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 2 THEN 1 ELSE 0 END) AS [Feb],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 3 THEN 1 ELSE 0 END) AS [Mar],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 4 THEN 1 ELSE 0 END) AS [Apr],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 5 THEN 1 ELSE 0 END) AS [May],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 6 THEN 1 ELSE 0 END) AS [Jun],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 7 THEN 1 ELSE 0 END) AS [Jul],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 8 THEN 1 ELSE 0 END) AS [Aug],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 9 THEN 1 ELSE 0 END) AS [Sep],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 10 THEN 1 ELSE 0 END) AS [Oct],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 11 THEN 1 ELSE 0 END) AS [Nov],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 12 THEN 1 ELSE 0 END) AS [Dec]
FROM SD, SL , ST, SH
WHERE [ST_DESP_DATE] >= '01-JAN-05' AND [ST_DESP_DATE] <= '31-JAN-05'
AND SH_CUST LIKE '01-CML%'
AND SD_ORDER = SL_ORDER
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
AND SD_STOCK = 'KMA36407750'
GROUP BY SD_STOCK, ST_DESP_DATE
ORDER BY ST_DESP_DATE


/**** Jobs which need to be closed -- for Gloria
were opened to despach, have a chargeout indicating job to be closed ****/
SELECT SD_STOCK, SUM(SL_PSLIP_QTY) "QTY DESP"
FROM SD, SL , ST, SH
WHERE [ST_DESP_DATE] >= '01-JAN-05' AND [ST_DESP_DATE] <= '31-MAR-05'
AND SH_CUST LIKE '01-CML%'
AND SD_ORDER = SL_ORDER
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
GROUP BY SD_STOCK, ST_DESP_DATE
ORDER BY ST_DESP_DATE



WHERE (QM_JOB_STATUS <> 12 AND QM_JOB_STATUS <> 13)
AND (LTRIM(RTRIM(QD_RESERVED_CHARS)) <> 'SAMPLES')
AND QM_NUMBER = QD_JOB_NUM
AND QM_NUMBER IN
(select	DISTINCT QM_NUMBER FROM QM, QO
WHERE QM_NUMBER = QO_JOB_NUM
AND QO_CLOSE = 1)
GROUP BY QM_NUMBER, QM_JOB_QTY, QM_QTY_DESP
HAVING (SUM(QD_DES_QTY) > QM_JOB_QTY)


/* TRAN_NO_PRICE  - where costprice is null*/
select IT_BATCH, IT_TRAN, IT_CUST, IT_STOCK, IM_OWNED_BY, IT_COST_PRICE,
CASE
	WHEN IT_TRAN_TYPE = 2 THEN 'STOCKTAKE'
	WHEN IT_TRAN_TYPE = 4 THEN 'TRANSFER'
	WHEN IT_TRAN_TYPE = 5 THEN 'ADJUSTMENT'
END AS IT_TRAN_TYPE
, IT_DATE
from IT, IM
where IT_STOCK = IM_STOCK
AND IM_OWNED_BY = 0
AND IT_COST_PRICE = 0
AND IT_TRAN_TYPE IN (2,4,5)
/* AND IT_DATE = '26-MAR-2006'; */
AND IT_DATE BETWEEN '26-MAR-2006' AND '26-JUNE-2006'
;


/* This query give all back orders as summary*/
USE 	PWIN171
SELECT DISTINCT 	IT_STOCK, IQ_AVAIL As 'Total Available', IQ_BO As 'Total BO'
FROM 	IT, IQ
WHERE 	IT_STOCK = IQ_STOCK
	AND IT_TRAN_TYPE = 1
	AND IT_ADD_DATE >= '01-SEP-07'
	AND IT_QTY > 0
	AND IT_CAT <> '01-PAPER'
	AND IQ_AVAIL > 0
	AND IQ_BO > 0
	AND IT_QUARANTINED = 0
	AND IT_CUST <>  '01-DEWR'
	AND IT_CUST <>  '01-CMLBIL'
	AND IT_CUST <>  '01-CMLKMA'
	AND IT_CUST <>  '01-CMLTYR'
	AND IT_CUST <>  '01-TOYFIN'
	AND IQ_ON_ORDER < 1
	AND IT_STOCK NOT LIKE 'CEX%'
	AND IT_STOCK NOT LIKE 'CBI%'
ORDER BY IT_STOCK


/* This query give all back orders as details*/
USE 	PWIN171
SELECT IT_STOCK, IQ_AVAIL As 'Total Available', IQ_BO As 'Total BO', IT_ORDER_NO,IT_SRC_BATCH
FROM 	IT, IQ
WHERE 	IT_STOCK = IQ_STOCK
	AND IT_TRAN_TYPE = 1
	AND IT_ADD_DATE >= '01-SEP-07'
	AND IT_QTY > 0
	AND IT_CAT <> '01-PAPER'
	AND IQ_AVAIL > 0
	AND IQ_BO > 0
	AND IT_QUARANTINED = 0
	AND IT_CUST <>  '01-DEWR'
	AND IT_CUST <>  '01-CMLBIL'
	AND IT_CUST <>  '01-CMLKMA'
	AND IT_CUST <>  '01-CMLTYR'
	AND IT_CUST <>  '01-TOYFIN'
	AND IQ_ON_ORDER < 1
	AND IT_STOCK NOT LIKE 'CEX%'
	AND IT_STOCK NOT LIKE 'CBI%'
ORDER BY IT_STOCK


--Admin Order Data
/*decalre variables*/
var cust varchar2(20)
exec :cust := 'TABCORP'
var stock varchar2(20)
exec :stock := 'COURIER'
var source varchar2(20)
exec :source := 'BSPRINTNSW'
var anal varchar2(20)
exec :anal := '72'
var start_date varchar2(20)
exec :start_date := To_Date('26-Jun-2013')
var end_date varchar2(20)
exec :end_date := To_Date('30-Jun-2013')
/*create temp table*/


/* Get Freight Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Sum(s.SH_ORDER) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", to_number(d2.SD_STOCK) AS "Stock2",d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,d.SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK like 'COURIER%' THEN 'Freight Fee is '
         ELSE 'Pick Fee is '
         END AS "FeeDescription",
  CASE   WHEN d.SD_STOCK like 'COURIER%' THEN '' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE '' -- || (Select RM_XX_FEE16 from RM where RM_CUST = 'IAG')
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM pwin175.SH s
  INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
  LEFT JOIN PWIN175.ST t ON t.ST_ORDER  = s.SH_ORDER
--,pwin175.ST t

  INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
  LEFT OUTER JOIN PWIN175.SD d2 ON
     d2.SD_STOCK = d.SD_STOCK AND
     d2.SD_DESC = d.SD_DESC AND
     d2.SD_SELL_PRICE = d.SD_SELL_PRICE AND
     (d2.SD_LINE > d.SD_LINE OR
          (
               d2.SD_ADD_DATE = d.SD_ADD_DATE AND
               d2.SD_ADD_TIME > d.SD_ADD_TIME
          )
     ) AND
    -- d2.SD_LINE > d.SD_LINE

   d2.SD_STOCK IS NULL

WHERE s.SH_ORDER = d.SD_ORDER
AND r.RM_CUST = 'IAG' OR r.RM_PARENT = 'IAG'
AND s.SH_ORDER = t.ST_ORDER
AND LTRIM(RTRIM(t.ST_PICK)) = LTRIM(RTRIM(d.SD_XX_PICKLIST_NUM))
--AND SD_XX_PICKLIST_NUM <> ''
--AND (SL_PICK_QTY >= 1)
--AND SD_STOCK like :stock
AND t.ST_DESP_DATE >= '01-Aug-2015' AND t.ST_DESP_DATE <= '31-Aug-2015'
--AND s.SH_ORDER = '   1292719'
--AND ROWNUM = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, d.SD_STOCK,d2.SD_STOCK, d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,d.SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,d.SD_STOCK
HAVING Sum(s.SH_ORDER) <> 1


UNION ALL

/*Get OrderEntryFee*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2, Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
 CASE   /* Swap Stock code with Fee Type*/
	        WHEN s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4 THEN  'OrderFee'
          WHEN s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4 THEN  'OrderFee'
          ELSE ''
          END AS "FeeDescription",
 CASE   /* Swap description with Fee Type*/
	        WHEN s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4 THEN  NULL ||  (Select RM_XX_FEE01 from RM where RM_CUST = :cust)
          ELSE ''
          END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4)
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,SD_STOCK



UNION ALL

/*Get PackingFee*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   /* Swap Stock code with Fee Type*/
	         WHEN i.IM_TYPE = 'BB_PACK'  THEN 'Packing Fee is '
            ELSE ''
          END AS "FeeDescription",
  CASE    /* Get Packing Fees If stock is of type BB_PACK then charge sRM_XX_FEE08.AsDouble * SL_PSLIP_QTY  */
	         WHEN i.IM_TYPE = 'BB_PACK'  THEN '' ||  (Select RM_XX_FEE08 from RM where RM_CUST = :cust)
            ELSE ''
            END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE (r.RM_ANAL = :anal)
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND (t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date )
AND (i.IM_TYPE = 'BB_PACK')
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,IM_TYPE,SH_SPARE_DBL_9,SD_STOCK




UNION ALL

/* Get Destruction Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE' THEN 'Destruction Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE' THEN '' ||  (Select RM_XX_FEE25 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE')
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,SH_NOTE_1,SH_CAMPAIGN,SD_STOCK




UNION ALL

/* Get Emergency Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC' THEN /*'Emergency Fee is '*/'' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC' THEN /*'Emergency Fee is '*/'' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC')
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,SD_STOCK,SH_CAMPAIGN



UNION ALL

/* Get Pallet Despatch Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_PALLETS >= 1 THEN 'Pallet Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_PALLETS >= 1 THEN '' ||  (Select RM_XX_FEE17 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_PALLETS >= 1)
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,ST_XX_NUM_PALLETS,SD_STOCK



UNION ALL

/* Get Carton Despatch Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_CARTONS >= 1 THEN 'Carton Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_CARTONS >= 1 THEN '' ||  (Select RM_XX_FEE17 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_CARTONS >= 1)
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,ST_XX_NUM_CARTONS,SD_STOCK



UNION ALL

/* Get ShrinkWrap Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES,  t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_PAL_SW >= 1 THEN 'ShrinkWrap Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_PAL_SW >= 1 THEN '' ||  (Select RM_XX_FEE18 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_PAL_SW >= 1)
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,ST_XX_NUM_PAL_SW,SD_STOCK



UNION ALL

/* Get Pick Fees
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(SH_EXCL) AS "Excl_Total", Count(sd.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Pick Fee'
         ELSE ''
         END AS "Stock",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN '' || (Select RM_XX_FEE16 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND d.SD_STOCK NOT LIKE :stock
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
--AND s.SH_ORDER = '   1334679'
--AND d.SD_LINE = 1





UNION ALL   */

/* Get Handeling Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES,  t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN (t.ST_PSLIP IS NOT NULL) THEN 'Handeling Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN (t.ST_PSLIP IS NOT NULL) THEN '' ||  (Select RM_XX_FEE06 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
--AND ((d.SD_PREV_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1287140'
AND d.SD_LINE = 1
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,SD_LINE,SD_STOCK






UNION ALL

/* Get Stock Lines*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 ,Sum(s.SH_EXCL) AS "Excl_Total", Count(d.SD_LINE) AS "NumOfLines", s.SH_NUM_LINES, t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock",
d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Pick Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN '' || (Select RM_XX_FEE16 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND (d.SD_LAST_PICK_NUM = t.ST_PICK )
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
AND d.SD_STOCK != :stock
--AND s.SH_ORDER = '   1287140'
GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SH_NUM_LINES, ST_WEIGHT, ST_PACKAGES, SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,SH_SPARE_DBL_9,SD_STOCK

--ORDER BY s.SH_ORDER, d.SD_LINE


var anal varchar2(20)
exec :anal := '72'
/*Used for getting EOM storage lines*/           /*OK as of Nov 2012    */

SELECT  NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST, IL_NOTE_2 , Sum(NE_AVAIL_ACTUAL) AS "TotalSOH", Count(IL_LOCN) AS "NumOfLocns",
NI_DATE, NE_DATE,NE_STATUS,NE_ERA, NE_STRENGTH, NI_AVAIL_ACTUAL, NI_LOCN, NE_STOCK, NE_QUANTITY, NE_ACCOUNT,NE_NA_EXT_KEY, NE_NV_EXT_TYPE,NE_NV_EXT_KEY,NE_MOVEMENT,
  CASE   WHEN IL.IL_NOTE_2 like 'Yes' THEN 'Pallet Fee is '
         WHEN IL.IL_NOTE_2 NOT like 'No'  THEN 'Shelf Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN IL.IL_NOTE_2 like 'Yes' THEN '' || (Select RM_XX_FEE11 from RM where RM_CUST = :cust)
         WHEN IL.IL_NOTE_2 NOT like 'No' THEN  '' || (Select RM_XX_FEE12 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee"
FROM PWIN175.NI, PWIN175.NE, PWIN175.IL, PWIN175.IM , PWIN175.RM r
WHERE IL_LOCN = NI_LOCN
AND NI_ENTRY = NE_ENTRY
AND NI_STOCK = IM_STOCK
AND RM_CUST = IM_CUST
--WHERE r.RM_SOURCE = :source
AND RM_ANAL = :anal
AND NE_AVAIL_ACTUAL >= '1'
GROUP BY NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST,IL_NOTE_2,NI_DATE,
NE_DATE,NE_STATUS,NE_ERA, NE_STRENGTH, NI_AVAIL_ACTUAL, NI_LOCN, NE_STOCK, NE_QUANTITY, NE_ACCOUNT,NE_NA_EXT_KEY, NE_NV_EXT_TYPE,NE_NV_EXT_KEY,NE_MOVEMENT, NE_PRICE_ENTRY, NE_COST_ENTRY,IL_NOTE_2

ORDER BY NI_LOCN, IM_STOCK
--End EOM Storage

--End Admin Order Data

-- Find DPS Report, XQ_REPEAT where (0,1,2,3,4,5 = "None", "Seconds", "Minutes","Hours", "Days", "Weeks", "Months"  & XQ_REPORT_ACTION where 4 = "TextFile"
	SELECT dpsreport.XQ_INVOKING_OP, dpsreport.XQ_AUDIT, dpsreport.XQ_ACTIVITY, dpsreport.XQ_FROM_CODE, dpsreport.XQ_REPORT_ACTION,
	  dpsreport.XQ_SERVER, dpsreport.XQ_EARLIEST_CODE,dpsreport.XQ_NOTIFY AS "NOTIFY OPERATOR", dpsreport.XQ_REPEAT, dpsreport.XQ_REPEAT_NUM
	FROM pwin175.XQ dpsreport
	WHERE Trim(dpsreport.XQ_FROM_CODE) like 'AOW_J6_PGX_USE_RG_ISA%'
--End Find DPS

--Test Output
	DECLARE
	  fHandler UTL_FILE.FILE_TYPE;
	BEGIN
	  fHandler := UTL_FILE.FOPEN('MYDIR', 'myfile', 'c');
	  UTL_FILE.PUTF(fHandler, 'Look ma, Im writing to a file!!!\n');
	  UTL_FILE.FCLOSE(fHandler);
	EXCEPTION
	  WHEN utl_file.invalid_path THEN
		 raise_application_error(-20000, 'Invalid path. Create directory or set UTL_FILE_DIR.');
	END;

	set serveroutput on;

	DECLARE
	  the_variable varchar(30);
	BEGIN
	  the_variable := '&the_variable';
	  dbms_output.put_line(the_variable);
	END;



	set serveroutput on;
	declare
	  v_str1   varchar2(80);
	begin
	  v_str1 := '&v_str';
	  dbms_output.put_line(v_str1);
	end;
--End Test Output

--Used for getting EOM storage lines*/           /*OK as of Nov 2012    */
--Name: EOM_STORAGE_LINES
SELECT  NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST, IL_NOTE_2 ,Count(NE_ENTRY) AS "NumEntries", Sum(NE_AVAIL_ACTUAL) AS "TotalSOH", Count(IL_LOCN) AS "NumOfLocns"
FROM PWIN175.NI, PWIN175.NE, PWIN175.IL, PWIN175.IM , PWIN175.RM
WHERE IL_LOCN = NI_LOCN
AND NI_ENTRY = NE_ENTRY
AND NI_STOCK = IM_STOCK
AND RM_CUST = IM_CUST
--AND (RM_SOURCE = 'BSPRINTNSW')
AND (RM_ANAL = '72')
AND NE_AVAIL_ACTUAL >= '1'
GROUP BY NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST,IL_NOTE_2
ORDER BY IM_STOCK
--End EOM Storage


--Gets admin movement and despatch qty */
SELECT ST_ORDER, SH_CUST, ST_PICK, ST_DESP_DATE, COUNT(*) AS "NUMLINE", SH_ADDRESS, SH_SUBURB, SH_CITY, SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2 , ST_WEIGHT, ST_PACKAGES, SL_PSLIP_QTY
FROM PWIN175.ST, PWIN175.SD, PWIN175.SH, PWIN175.RM , PWIN175.SL
WHERE SD_ORDER = SH_ORDER
AND SH_ORDER = ST_ORDER
AND SL_ORDER = SD_ORDER
AND RM_CUST = SH_CUST
AND ((RM_PARENT LIKE 'COL_%') OR (RM_CUST LIKE 'COL_%'))
AND (SH_CUST NOT LIKE 'K%')
AND (SH_CUST NOT LIKE 'T%')
AND ST_DESP_DATE >= '01-JUN-11'
AND ST_DESP_DATE <= '30-JUN-11'
GROUP BY ST_PICK, ST_ORDER, SH_CUST, ST_DESP_DATE , SH_ADDRESS, SH_SUBURB, SH_CITY, SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, ST_WEIGHT, ST_PACKAGES, SL_PSLIP_QTY
ORDER BY ST_DESP_DATE
--End Admin Movement

--Now trying to total locations and qty's */
SELECT  NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST, IL_NOTE_2, Sum(NE_AVAIL_ACTUAL) AS 'TotalSOH', Count(IL_LOCN) AS 'NumOfLocns'
FROM PWIN175.NI, PWIN175.NE, PWIN175.IL, PWIN175.IM
WHERE IL_LOCN = NI_LOCN
AND NI_ENTRY = NE_ENTRY
AND NI_STOCK = IM_STOCK
AND NE_AVAIL_ACTUAL >= '1'
AND IM_CUST = 'COLESGROUP'
GROUP BY NI_ENTRY, NI_TRAN_TYPE,NI_STATUS,NI_ERA, NI_QUANTITY, NE_AVAIL_ACTUAL, IL_LOCN, IM_STOCK, IM_CUST,IL_NOTE_2
ORDER BY IM_STOCK
--End Location QTY's

--End Admin Order Data
--Select Case example tests
/* GOOD ONE FOR DESPATCHES WITH COUNTS */   /*OK as of Nov 2012    */    Looks LIKE this IS ONLY SQL code NOT PSQL

USE PWIN175;
set serveroutput on;

/*Declare variables.*/
DECLARE @OrderFee varchar2(40), @PickFee varchar(30),@HandelingFee varchar(30);

/*Set their values.*/
SET @OrderFee = (Select RM_XX_FEE01 from RM where RM_CUST = 'LINK');
SET @PickFee = (Select RM_XX_FEE16 from RM where RM_CUST = 'LINK');
SET @HandelingFee = (Select RM_XX_FEE06 from RM where RM_CUST = 'LINK') ;


/*Use them in the WHERE clause of a SELECT statement.*/
SELECT * FROM RM WHERE RM_XX_FEE01 = @OrderFee    OR RM_XX_FEE16 = @PickFee;
GO

set serveroutput on;

DECLARE
	the_variable varchar(30);
BEGIN
	the_variable := '&the_variable';
	dbms_output.put_line(the_variable);
END;


--ORACLE QUERY

set serveroutput on;
GRANT select ON PWIN175.RM TO PWIN175;
DECLARE
  OrderFee varchar2(140); /*, PickFee varchar(30),HandelingFee varchar(30);    */
  Cust varchar2(140) := 'LINK';
  Result varchar2(140) ;
BEGIN


DECLARE
  var name varchar2(20)
  exec :name := 'SALES'
  var Result varchar2(140);
  var Cust varchar2(20)   ;
  var OrderFee varchar2(140) ;
BEGIN

  exec :Cust := 'LINK'
  dbms_output.put_line(cust);
  exec :OrderFee := 'Select RM_XX_FEE01 INTO OrderFee from RM where RM_CUST = :Cust';



END;
  dbms_output.put_line(Result);
  Select RM_XX_FEE01 INTO OrderFee from RM where RM_XX_FEE01 = :OrderFee;
  dbms_output.put_line(:OrderFee);
  dbms_output.put_line(:Result);

  --OrderFee := 'Select RM_XX_FEE01 INTO Result from RM where RM_CUST = Cust'
  --OrderFee := Select RM_XX_FEE01 INTO Result from RM where RM_CUST = Cust;
  --OrderFee := '3.30';
  /*This works ok  */
  Select RM_XX_FEE01 INTO Result from RM where RM_XX_FEE01 = :OrderFee;
  dbms_output.put_line(OrderFee);
  dbms_output.put_line(Result);

  /*PickFee := (Select RM_XX_FEE16 from RM where RM_CUST = 'LINK');
  dbms_output.put_line(the_variable);
  HandelingFee := (Select RM_XX_FEE06 from RM where RM_CUST = 'LINK') ;
  dbms_output.put_line(the_variable);*/
END;






/*select @OrderFee = RM_XX_FEE01, @PickFee = RM_XX_FEE16, @HandelingFee = RM_XX_FEE06
    from RM
    where RM_CUST = 'LINK'    */

--End Test Case Scripts
--Admin Order Data
SELECT s.SH_SH_ORDER, s.SH_SH_CUST AS "Customer", COUNT(*) AS "NUMLINE", s.SH_SH_ADDRESS, s.SH_SH_SUBURB, s.SH_SH_CITY, s.SH_SH_STATE, s.SH_SH_POST_CODE, s.SH_SH_NOTE_1,
s.SH_SH_NOTE_2 , sd2.SD_LINE, sd2.SD_STOCK AS Stock, sd2.SD_QTY_ORDER, sd2.SD_DESC, sd2.SD_EXCL, sd2.SD_INCL ,
      CASE
	      WHEN SH_SPARE_DBL_9 = 1 OR SH_SPARE_DBL_9 = 3 OR SH_SPARE_DBL_9 = 2 OR SH_SPARE_DBL_9 = 4 THEN 'OrderFee' /*'OrderEntryFee'   */
        ELSE 'NoOrderEntryFee'
      END AS SH_SPARE_DBL_9 , SH_ADD_DATE  ,
      CASE
         WHEN SD_STOCK like 'COURIER%' THEN 'Freight Fee is ' || CAST(SD_SELL_PRICE AS VARCHAR(20))
         --WHEN SD_STOCK NOT lIKE 'COURIER%' AND SL_PICK_QTY >= 1 THEN 'PickFee is '   ||  (Select RM_XX_FEE16 from RM where RM_CUST = 'LINK')
         WHEN SD_STOCK NOT lIKE 'COURIER%' AND (SELECT SL_PICK_QTY FROM SL,SH INNER JOIN PWIN175.SL ON PWIN175.s.SH_SH_ORDER = SL.SL_ORDER WHERE SH_ORDER >= 1 THEN 'PickFee is '   ||  (Select RM_XX_FEE16 from RM where RM_CUST = 'LINK')

      END AS "Charge",r.RM_CUST, r.RM_XX_FEE16, r2.RM_CUST, r2.RM_XX_FEE16
FROM pwin175.SH s
  left join pwin175.RM r ON r.RM_CUST = s.SH_CUST
  left join pwin175.RM r2 ON r.RM_PARENT = r2.RM_CUST
  left join pwin175.SD sd2 ON sd2.SD_ORDER = s.SH_ORDER
WHERE LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SL_PICK))

AND SH_ORDER = ST_ORDER
AND SH_ORDER = SD_ORDER
AND SL_ORDER = ST_ORDER
AND RM_CUST = SH_CUST
AND (SL_PICK_QTY >= 1)
AND (RM_SOURCE = 'BSPRINTNSW')
AND ST_DESP_DATE >= '1-JAN-13'
AND ST_DESP_DATE <= '31-JAN-13'
AND SH_ORDER = '   1267078'
GROUP BY SH_ORDER, SH_CUST, SH_ADDRESS, SH_SUBURB, SH_CITY, SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SD_LINE,
SD_STOCK, SD_QTY_ORDER, SD_DESC, SD_EXCL, SD_INCL, SH_SPARE_DBL_9, SH_ADD_DATE , SD_STOCK, SD_SELL_PRICE, SL_PICK_QTY,RM_CUST, RM_XX_FEE16, RM_CUST, RM_XX_FEE16
ORDER BY SD_LINE, SH_CUST
--End Admin Order Data




--Admin Freight Order Data
SELECT s.SH_ORDER, s.SH_CUST AS "Customer", COUNT(*) AS "NUMLINE", s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY, s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1,
s.SH_NOTE_2 , sd2.SD_LINE, sd2.SD_STOCK AS Stock, sd2.SD_QTY_ORDER, sd2.SD_DESC, sd2.SD_EXCL, sd2.SD_INCL , sd2.SD_NOTE_1 AS "IFSCost",
      CASE
         WHEN SD_STOCK like 'COURIER%' THEN 'Freight Fee is ' || CAST(SD_SELL_PRICE AS VARCHAR(20))
      END AS "Charge"     , t.ST_DESP_DATE
FROM pwin175.SH s,pwin175.SD sd2,pwin175.ST t , pwin175.SL l
WHERE LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SL_PICK))
AND SH_ORDER = ST_ORDER
AND SH_ORDER = SD_ORDER
AND SL_ORDER = ST_ORDER
AND (SL_PICK_QTY >= 1)
AND SD_STOCK like 'COURIER%'
AND ST_DESP_DATE >= '1-FEB-13'
AND ST_DESP_DATE <= '28-FEB-13'
GROUP BY SH_ORDER, SH_CUST, SH_ADDRESS, SH_SUBURB, SH_CITY, SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2, SD_LINE,
SD_STOCK, SD_QTY_ORDER, SD_DESC, SD_EXCL, SD_INCL, SD_NOTE_1, SH_SPARE_DBL_9, SH_ADD_DATE , SD_STOCK, SD_SELL_PRICE, ST_DESP_DATE
ORDER BY SD_LINE, SH_CUST
--End Freight Admin Order Data






--GOOD ONE FOR JASON DESPATCHES WITH COUNTS */
USE PWIN171
SELECT ST_ORDER, SH_CUST, ST_PICK, ST_DESP_DATE, COUNT(*) AS "NUMLINE"
FROM ST, SD, SH
WHERE SD_ORDER = SH_ORDER
/* AND LTRIM(RTRIM(ST_ORDER)) = '202759'  */
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
/* AND SD_LAST_PSLIP_NUM <> '' */
/* AND SH_CUST NOT LIKE('01-9%') */
AND SH_CUST <> '01-990200'
AND SH_CUST <> '01-910001'
AND SD_STOCK NOT LIKE('CPL%')
AND SD_STOCK NOT LIKE ('FREIGHT%')
AND SD_STOCK <> 'ORDER'
AND ST_DESP_DATE >= '01-JUL-06'
/* AND ST_DESP_DATE < '03-JUL-07' */
AND ST_DESP_DATE <= '31-MAR-07'
GROUP BY ST_PICK, ST_ORDER, SH_CUST, ST_DESP_DATE
ORDER BY ST_DESP_DATE

--GOOD ONE FOR JASON DESPATCHES WITH COUNTS */
USE PWIN171
SELECT SD_STOCK, ST_DESP_DATE, COUNT(*) AS "NUMLINE"
FROM ST, SD, SH
WHERE SD_ORDER = SH_ORDER
/* AND SD_LAST_PSLIP_NUM = ST_PSLIP */
/* AND LTRIM(RTRIM(ST_ORDER)) = '202759'  */
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
/* AND SD_LAST_PSLIP_NUM <> '' */
/* AND SH_CUST NOT LIKE('01-9%') */
AND SH_CUST LIKE '01-CML%'
AND SD_STOCK NOT LIKE('CPL%')
AND SD_STOCK NOT LIKE ('FREIGHT%')
AND SD_STOCK <> 'ORDER'
AND ST_DESP_DATE >= '01-JAN-05'
/* AND ST_DESP_DATE < '03-JUL-07' */
AND ST_DESP_DATE <= '31-MAR-05'
GROUP BY SD_STOCK, ST_PICK, ST_ORDER, SH_CUST, ST_DESP_DATE
ORDER BY ST_DESP_DATE

--Desp QTY
SELECT DISTINCT SD_STOCK, SUM(SL_PSLIP_QTY) "QTY DESP",
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 1 THEN 1 ELSE 0 END) AS [Jan],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 2 THEN 1 ELSE 0 END) AS [Feb],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 3 THEN 1 ELSE 0 END) AS [Mar],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 4 THEN 1 ELSE 0 END) AS [Apr],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 5 THEN 1 ELSE 0 END) AS [May],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 6 THEN 1 ELSE 0 END) AS [Jun],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 7 THEN 1 ELSE 0 END) AS [Jul],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 8 THEN 1 ELSE 0 END) AS [Aug],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 9 THEN 1 ELSE 0 END) AS [Sep],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 10 THEN 1 ELSE 0 END) AS [Oct],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 11 THEN 1 ELSE 0 END) AS [Nov],
SUM(CASE WHEN DATEPART(MONTH, [ST_DESP_DATE]) = 12 THEN 1 ELSE 0 END) AS [Dec]
FROM SD, SL , ST, SH
WHERE [ST_DESP_DATE] >= '01-JAN-05' AND [ST_DESP_DATE] <= '31-JAN-05'
AND SH_CUST LIKE '01-CML%'
AND SD_ORDER = SL_ORDER
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
AND SD_STOCK = 'KMA36407750'
GROUP BY SD_STOCK, ST_DESP_DATE
ORDER BY ST_DESP_DATE


--Jobs which need to be closed -- for Gloria
--were opened to despach, have a chargeout indicating job to be closed ****/
SELECT SD_STOCK, SUM(SL_PSLIP_QTY) "QTY DESP"
FROM SD, SL , ST, SH
WHERE [ST_DESP_DATE] >= '01-JAN-05' AND [ST_DESP_DATE] <= '31-MAR-05'
AND SH_CUST LIKE '01-CML%'
AND SD_ORDER = SL_ORDER
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
GROUP BY SD_STOCK, ST_DESP_DATE
ORDER BY ST_DESP_DATE



WHERE (QM_JOB_STATUS <> 12 AND QM_JOB_STATUS <> 13)
AND (LTRIM(RTRIM(QD_RESERVED_CHARS)) <> 'SAMPLES')
AND QM_NUMBER = QD_JOB_NUM
AND QM_NUMBER IN
(select	DISTINCT QM_NUMBER FROM QM, QO
WHERE QM_NUMBER = QO_JOB_NUM
AND QO_CLOSE = 1)
GROUP BY QM_NUMBER, QM_JOB_QTY, QM_QTY_DESP
HAVING (SUM(QD_DES_QTY) > QM_JOB_QTY)


--TRAN_NO_PRICE  - where costprice is null*/
select IT_BATCH, IT_TRAN, IT_CUST, IT_STOCK, IM_OWNED_BY, IT_COST_PRICE,
CASE
	WHEN IT_TRAN_TYPE = 2 THEN 'STOCKTAKE'
	WHEN IT_TRAN_TYPE = 4 THEN 'TRANSFER'
	WHEN IT_TRAN_TYPE = 5 THEN 'ADJUSTMENT'
END AS IT_TRAN_TYPE
, IT_DATE
from IT, IM
where IT_STOCK = IM_STOCK
AND IM_OWNED_BY = 0
AND IT_COST_PRICE = 0
AND IT_TRAN_TYPE IN (2,4,5)
/* AND IT_DATE = '26-MAR-2006'; */
AND IT_DATE BETWEEN '26-MAR-2006' AND '26-JUNE-2006';



-- #1
-- Find CustomerID in customer table
select cust.customerID, cust.accountno, cust.externalcustomerID, cust.name, a.addresslines, a.city, a.state, a.postzipcode, c.countryname, c_ext.confirmation_email, cust.notactive,
  CCTable.costcentreID, CCTable.costcentrecode, CCTable.costcentredescription
FROM BSPGA_netorder.dbo.customer cust with (nolock)
LEFT JOIN BSPGA_netorder.dbo.address a with (nolock) ON cust.addressid= a.addressid
LEFT JOIN BSPGA_netorder.dbo.country c with (nolock) ON c.countrycode = a.countrycode
LEFT JOIN BSPGA_netorder.dbo.customer_ext c_ext with (nolock) ON c_ext.customerID = cust.customerID
LEFT JOIN  BSPGA_netorder.dbo.costcentre CCTable with (nolock) ON CCTable.customerID = cust.customerID
WHERE cust.externalcustomerID in ('ISA-RACV')
order by cust.externalcustomerID

-- #2
-- Deleting Costcentre & Costcentrevisibility Table - using cust.customerID from #1
-- First get the customerID from #1 and use this to query all COSTCENTRES related to the customer
select * from BSPGA_netorder.dbo.costcentre CCTable where CCTable.customerID= 92903

-- Before applying a delete to OW. Export the DATA into EXCEL to build 2nd stage to delete respective costcentrevisibility. After exporting to EXCEL to can proceed to delete the COSTCENTRE table
Delete from BSPGA_netorder.dbo.costcentre where customerID= 92903

-- #3
-- In excel, add a new column at the end of the exported = with the formula to delete one by on the costcentrevisibility table. See excel attachement
-- Delete from BSPGA_netorder.dbo.costcentrevisibility where costcentreID = 4467
Delete from BSPGA_netorder.dbo.costcentrevisibility where costcentreID = 4763
Delete from BSPGA_netorder.dbo.costcentrevisibility where costcentreID = 4764
Delete from BSPGA_netorder.dbo.costcentrevisibility where costcentreID = 4765

-- Find IX_STOCK
SELECT IX_STOCK, IX_PORTFOLIO
FROM pwin175.IX WHERE IX_STOCK = 'AEX9287'



SELECT c.ID, c.RM_CUST, c.RM_NAME, c.RM_TYPE, c.RM_PARENT, c.RM_XX_PARENT AS "2nd RM PARENT", c.RM_XX_IS_OW_CUST, c.RM_XX_OW_CATALOG_CUST, c.RM_XX_COSTCENTREREQ, c.RM_XX_CC_MIN_LNGTH,
       a.RD_CODE, a.RD_ADDRESS, a.RD_SUBURB, a.RD_CITY, a.RD_STATE, a.RD_POST_CODE, a.RD_COUNTRY, a.RD_CONT_NAME, a.RD_MOBILE
FROM pwin175.RM c
left JOIN pwin175.RD a ON a.RD_CUST = c.RM_CUST
WHERE c.RM_XX_PARENT = 'NSWMAR' or c.RM_CUST IN ('NSWMAR') or c.RM_PARENT = 'NSWMAR'


-- Find Prospects
SELECT c.ID, c.RM_CUST, c.RM_NAME, c.RM_TYPE, c.RM_ACTIVE, c.RM_PARENT, c.RM_XX_PARENT AS "2nd RM PARENT", v.VU_PROFILE
FROM pwin175.RM c
left JOIN pwin175.VU v ON v.VU_CUST = c.RM_CUST
WHERE c.RM_XX_PARENT = 'CANON' AND c.RM_TYPE = 1
ORDER BY v.VU_PROFILE


-- Find RD_MOBILE as RD_MOBILE equates to RM_CUST (Prospects)
SELECT c.ID, c.RM_CUST, c.RM_NAME, c.RM_TYPE, c.RM_PARENT, c.RM_XX_PARENT AS "2nd RM PARENT"
FROM pwin175.RM c
WHERE c.RM_PARENT = 'NSWMAR' AND c.RM_TYPE = 0


-- Find RD_MOBILE as RD_MOBILE equates to RM_CUST (Prospects)
SELECT a.RD_CUST, a.RD_CODE, a.RD_ADDRESS, a.RD_SUBURB, a.RD_CITY, a.RD_STATE, a.RD_POST_CODE, a.RD_COUNTRY, a.RD_CONT_NAME, a.RD_MOBILE
FROM pwin175.RD a
WHERE a.RD_CUST ='NSWMAR'


-- NE Table is the new INVENTORY Table for PrismIQ v 2010.9.2
-- All AUTOMATED TRANSACTIONS will have a corresponding NE
SELECT * FROM pwin175.NE
WHERE NE_ADD_DATE > = '10-APR-2011'



-- IT Table is another INVENTORY Table for PrismIQ v 2010.9.2
-- All MANUAL TRANSACTIONS (Transfer, Stocktake, Manual Receipts) will have a corresponding IT
SELECT * FROM pwin175.IT
WHERE IT_ADD_DATE > = '10-APR-2011'


-- Find Diary Notes
SELECT note.*
FROM pwin175.YN note
--WHERE note.YN_TYPE = 'ORDCONFM' OR note.YN_COMMENT LIKE '%SANDIE%'
WHERE note.YN_COMMENT LIKE '%andrew%'


SELECT note.*
FROM pwin175.YN note
WHERE note.YN_COMMENT LIKE 'jose.b%' OR YN_ACTION LIKE '%jose.b%'



DECLARE @OneWeekafterNow datetime
SET @OneWeekAfterNow = CONVERT(datetime, CONVERT(varchar, DATEADD(d,+2,GETDATE()),101))

SELECT rline.PRODUCTCODECOPY, prod.DESCRIPTION, rline.QUANTITY,
	rheader.REQUISITIONNUMBER, rheader.CUSTREF, cust.ACCOUNTNO, cust.NAME as 'ACCOUNT NAME', rheader.CYCLECODE,
	addr.POSTZIPCODE , p.CLOSEDATE, rheader.CONTACTCOMPANYNAME , rheader.CONTACTNAME, rheader.DELIVERYCOMMENTS, rheader.REQUISITIONCOMMENT
FROM BSPGA_netorder.dbo.Period p with (nolock)
	JOIN BSPGA_netorder.dbo.requisition_header rheader with (nolock) on rheader.cyclecode = p.CYCLECODE
	JOIN BSPGA_netorder.dbo.requisition_line rline with (nolock) on rheader.Requisitionid = rline.REQUISITIONID
	JOIN BSPGA_netorder.dbo.product prod with (nolock) on rline.PRODUCTID = prod.PRODUCTID
	JOIN BSPGA_netorder.dbo.customer cust with (nolock) on cust.CUSTOMERID = rheader.CUSTOMERID
	JOIN BSPGA_netorder.dbo.address addr with (nolock) on addr.ADDRESSID = cust.ADDRESSID
WHERE (rheader.ORDERTYPE = 'QSR' and rheader.STATUSCODE = 'T')
	AND rheader.DUEDATE <= p.CLOSEDATE AND p.CLOSEDATE < @OneWeekAfterNow		--CONVERT(DATETIME, '2011-01-08 00:00:00', 102))
ORDER BY rline.PRODUCTID, rheader.CYCLECODE


USE BSPGA_NETORDER
select CREATE_DATE as CREATEDATE,SUBMITDATE,DUEDATE,DELIVERYDATE,*  from REQUISITION_HEADER with (nolock) where ORDERTYPE = 'QSR' order by CREATE_DATE desc


-- ************************************************************ START Processing QSR failed orders ************************************************************--
-- #1
-- Manual Entry of QSR Failed Order
-- NOTE: Do SAVE these ORDERS as DRAFT !!!!!
-- Enter Order using the site and Filter the orders entered using rh.CREATE_DATE and rh.STATUS = 'D'
select rh.customerID, c.accountNO, c.name, rh.requisitionID, rh.requisitionnumber, rh.create_date, rh.statuscode,  rh.ORDERTYPE, rh.CYCLECODE,
  rh.origusercode as 'username',  rh.approveruserguid, u_ext.externaluserid as 'VM Approver', rh.externalorderID as 'Prism OrdNo',
  r4.trgrequisitionID, r5.requisitionnumber as PrismXML_no, rh.installationid, rh.DISPLAYGSTTOTAL, rh.GROSSTOTAL, rh.SUBTOTAL, rh.DELIVERYTYPEID
  --ra.line1 as 'Delivery Address', RA.city, ra.state, ra.postzipcode, ra.countryname, ra.contact, ra.contacttelephone, ra.externaladdressID
FROM BSPGA_netorder.dbo.requisition_header rh with (nolock)
	inner join BSPGA_netorder.dbo.customer c with (nolock) on c.customerID = rh.customerID
	left join BSPGA_netorder.dbo.user_ext u_ext with (nolock) on u_ext.userGUID = rh.approveruserguid -- retrieve a list even without approverID
	left join BSPGA_netorder.dbo.requisition_line_link r4 with (nolock) on r4.srcrequisitionID = rh.requisitionID
	left join BSPGA_netorder.dbo.requisition_header r5 with (nolock) on r5.requisitionID = r4.trgrequisitionID
	left join BSPGA_netorder.dbo.requisition_address ra with (nolock) on ra.requisitionaddressid= rh.deliveryaddressID
where rh.ordertype  = 'QSR'
and rh.create_date >= '2011-08-05 00:00:00' and rh.STATUSCODE = 'P'

-- #2
-- Get requisition lines and delete the 'EMERGENCY ORDER'
-- Use the REQUISITIONID from results in #1
select * from REQUISITION_LINE where REQUISITIONID in (
	622609, 622621,
	622585,622620,
	622604,622622,
	622626,622637)


-- ************************************************************ END Processing QSR failed orders ************************************************************--


--- QSR Template decrementing SOH

select SUM(quantity) from bspga_netorder.dbo.REQUISITION_LINE with (nolock)
where PRODUCTCODECOPY = '158050'
and CLASS like '%salesorder%'
and STATUS not in ('T', 'X', 'D')
order by quantity desc

select CREATE_DATE,* from bspga_netorder.dbo.REQUISITION_HEADER where REQUISITIONID in (select REQUISITIONID from bspga_netorder.dbo.REQUISITION_LINE with (nolock)
where PRODUCTCODECOPY = '158050'
and CLASS like '%salesorder%')
and CREATE_DATE > (GETDATE()-2)

select PRODUCTCODECOPY,QUANTITY,* from bspga_netorder.dbo.REQUISITION_LINE where REQUISITIONID in (
select REQUISITIONID from bspga_netorder.dbo.REQUISITION_HEADER where REQUISITIONID in (select REQUISITIONID from bspga_netorder.dbo.REQUISITION_LINE with (nolock)
where PRODUCTCODECOPY = '158050'
and CLASS like '%salesorder%')
and CREATE_DATE > (GETDATE()-2)
)
and PRODUCTCODECOPY = '158050'
and CLASS like '%salesorder%'
order by REQUISITIONID desc




select * from bspga_staging.dbo.BSPG_QUANTITYLOAD
where IM_STOCK in ('158050', '160308','SUP0033T','SUP8')

select * from bspga_staging.dbo.BSPG_QUANTITY
where code in ('158050', '160308','SUP0033T','SUP8')



select  IM_STOCK as CODE,
	(supplier + '-' + IM_STOCK) as EXTERNALPRODUCTID,
	getDate() as LASTCHANGEDDATE,
	IQ_STOCK_AVAIL as STOCKLEVEL,
	IQ_BO as STOCKONBACKORDER,
	ON_ORDER as STOCKONORDER,
	ON_ORDER_DATE as STOCKONORDERETA,
	IT_ORDER_NO as MULTIPLEREORDERS
    from bspga_staging.dbo.BSPG_QUANTITYLOAD

-- Adjust for reserved stock
SELECT externalproductid,
                          SUM(quantity) reserved
                   FROM   bspga_log..execstate es WITH (nolock)
                          INNER JOIN bspga_netorder..requisition_header rh WITH (nolock)
                            ON es.primarykey = rh.requisitionid
                          INNER JOIN bspga_netorder..requisition_line rl WITH (nolock)
                            ON rh.requisitionid = rl.requisitionid
                          INNER JOIN bspga_netorder..product p WITH (nolock)
                            ON rl.productid = p.productid
                   WHERE  es.primaryentity = 'SalesOrder'
                          AND rl.productid IS NOT NULL
                          AND es.MODELGUID <> '0a400a8d001fc2fb4b53a95800000017' -- Sales Order Fulfillment Process
                          and p.CODE in('158050','160308','SUP0033T','SUP8')
                 GROUP  BY externalproductid




SELECT externalproductid, rh.*
                   FROM   bspga_log..execstate es WITH (nolock)
                          INNER JOIN bspga_netorder..requisition_header rh WITH (nolock)
                            ON es.primarykey = rh.requisitionid
                          INNER JOIN bspga_netorder..requisition_line rl WITH (nolock)
                            ON rh.requisitionid = rl.requisitionid
                          INNER JOIN bspga_netorder..product p WITH (nolock)
                            ON rl.productid = p.productid
                   WHERE  es.primaryentity = 'SalesOrder'
                          AND rl.productid IS NOT NULL
                          AND es.MODELGUID <> '0a400a8d001fc2fb4b53a95800000017' -- Sales Order Fulfillment Process
                          and p.CODE in('158050')

                          ,'160308','SUP0033T','SUP8')
                 GROUP  BY externalproductid




SELECT distinct es.MODELGUID
                   FROM   bspga_log..execstate es WITH (nolock)
                          INNER JOIN bspga_netorder..requisition_header rh WITH (nolock)
                            ON es.primarykey = rh.requisitionid
                          INNER JOIN bspga_netorder..requisition_line rl WITH (nolock)
                            ON rh.requisitionid = rl.requisitionid
                          INNER JOIN bspga_netorder..product p WITH (nolock)
                            ON rl.productid = p.productid
                   WHERE  es.primaryentity = 'SalesOrder'
                          AND rl.productid IS NOT NULL
                          AND es.MODELGUID <> '0a400a8d001fc2fb4b53a95800000017' -- Sales Order Fulfillment Process
                          and p.CODE in('158050')

select * from bspga_config..FUSIONMODEL where GUID = '0a400ab500d9660d4d8c02570000000f'



--Create Table
create table destinations (
  name                   varchar(255) not null,
  isQueue                int not null,
  destinationId          bigint not null
);
create unique index destinations_pk on destinations(name);



--Update next invoice number
SELECT RC_NEXT_INV_NUM FROM pwin177.RC
UPDATE pwin177.RC
SET RC_NEXT_INV_NUM = '354556'




--Set Location to Active
SELECT IL_ACTIVE FROM pwin175.IL

UPDATE pwin175.IL
SET IL_ACTIVE = 1   WHERE IL_LOCN = 'R00130B'


UPDATE pwin175.IL
SET   IL_ACTIVE = 1
WHERE IL_LOCN = 'M37-A1'




--Get Prism Locks
SELECT * FROM pwin177.XK


SELECT SD_ORDER FROM SD WHERE SD_STATUS = 3 AND SD_REASON IS NULL


--Stock Dump for Import '/
SELECT IM_STOCK,  IM_DESC,     IM_SPEC,     IM_NOTE_1,       IM_NOTE_2,
IM_NOTE_3,   IM_DBL_1,   IM_DBL_2,  IM_DBL_3,   IM_DATE_1,
IM_ACTIVE,     IM_GO_INACTIVE,
IM_BRAND,    IM_CAT,     IM_TYPE,
IM_KEEP_LEVELS,    IM_LEVEL_UNIT,   IM_MIN_SELL_QTY,  IM_STD_SELL_QTY, IM_MIN_QTY, IM_MAX_QTY,
IM_CUST,      IM_CUST_STOCK
FROM IM
WHERE IM_CUST  = 'AUSUNI'
--AND IM_ACTIVE = 1
ORDER BY IM_GO_INACTIVE,IM_CUST

--Get UOM
SELECT * FROM IU


--Freight Query '/
SELECT RM_PARENT, SH_STATUS, RM_CUST, SH_ORDER, SH_ADDRESS, SH_SUBURB,
 SH_CITY,  SH_STATE,  SH_COUNTRY, SH_POST_CODE, SH_NOTE_1 AS Deliver_To,
 SH_NOTE_2 AS Attention_To,  SH_SPARE_STR_5 AS Online_Order_Number,SD_STOCK,
 SD_DESC, SD_SELL_PRICE, ST_PICK,ST_PSLIP, ST_PACKAGES, ST_DESP_DATE, ST_WEIGHT,
 ST_XX_NUM_CARTONS,ST_PACKAGES
FROM RM, SH, SD, ST
WHERE RM_PARENT = 'BEYONDBLUE'
AND SD_STOCK LIKE 'COURIER%'
AND ST_DESP_DATE >= To_Date('1-Jun-2013') AND ST_DESP_DATE <= To_Date('30-Jun-2013')
AND SH_ORDER = SD_ORDER
AND ST_ORDER = SH_ORDER
AND SH_CUST = RM_CUST


--Riteway
SELECT RM_XX_RITEWAY_ACCT,RM_ADD_DATE      FROM RM
WHERE RM_XX_RITEWAY_ACCT <> ''
ORDER BY RM_ADD_DATE Desc
 /''/




--YN Extract ' //
SELECT *
FROM YN
WHERE YN_ADD_DATE >= '1-Nov-2011' AND YN_ADD_DATE <= '30-Nov-2011'


--Actual Available Stock Query '/
SELECT IM_STOCK, IL_IN_LOCN, NI_LOCN, NI_QUANTITY,NI_AVAIL_ACTUAL, NI_STATUS, NI_STRENGTH, IM_DESC, NI_DATE, NI_MADE_DATE, NI_QUARANTINED, NI_ENTRY, NI_QJ_NUMBER, NI_QD_DES_SEQ, NI_TRAN_TYPE, NI_ID  FROM NI, IM, IL
WHERE  (NI_AVAIL_ACTUAL > 1) AND ((NI_STATUS = 1) OR (NI_STATUS = 2))
AND NI_STOCK = IM_STOCK
AND NI_LOCN = IL_LOCN
AND IM_CUST = 'RTA'

ORDER BY IM_CUST ASC

--Available Stock Query '/

SELECT IM_STOCK, IL_IN_LOCN, NI_LOCN, NI_QUANTITY,NI_AVAIL_ACTUAL, NI_AVAIL_TENTATIVE, NI_STATUS, NI_STRENGTH, IM_DESC, NI_DATE, NI_MADE_DATE, NI_QUARANTINED  FROM NI, IM, IL
WHERE  ((NI_AVAIL_ACTUAL > 1) OR (NI_AVAIL_TENTATIVE < 1)) AND ((NI_STATUS = 1) OR (NI_STATUS = 2))
AND NI_STOCK = IM_STOCK
AND NI_LOCN = IL_LOCN

ORDER BY IM_CUST ASC



--RD
DELETE FROM RD
WHERE RD_LOCN = 'MELBOURNE'
ORDER BY RD_LOCN Desc

--This query give all back orders as summary*/
USE 	PWIN171
SELECT DISTINCT 	IT_STOCK, IQ_AVAIL As 'Total Available', IQ_BO As 'Total BO'
FROM 	IT, IQ
WHERE 	IT_STOCK = IQ_STOCK
	AND IT_TRAN_TYPE = 1
	AND IT_ADD_DATE >= '01-SEP-07'
	AND IT_QTY > 0
	AND IT_CAT <> '01-PAPER'
	AND IQ_AVAIL > 0
	AND IQ_BO > 0
	AND IT_QUARANTINED = 0
	AND IT_CUST <>  '01-DEWR'
	AND IT_CUST <>  '01-CMLBIL'
	AND IT_CUST <>  '01-CMLKMA'
	AND IT_CUST <>  '01-CMLTYR'
	AND IT_CUST <>  '01-TOYFIN'
	AND IQ_ON_ORDER < 1
	AND IT_STOCK NOT LIKE 'CEX%'
	AND IT_STOCK NOT LIKE 'CBI%'
ORDER BY IT_STOCK


--This query give all back orders as details*/
USE 	PWIN171
SELECT IT_STOCK, IQ_AVAIL As 'Total Available', IQ_BO As 'Total BO', IT_ORDER_NO,IT_SRC_BATCH
FROM 	IT, IQ
WHERE 	IT_STOCK = IQ_STOCK
	AND IT_TRAN_TYPE = 1
	AND IT_ADD_DATE >= '01-SEP-07'
	AND IT_QTY > 0
	AND IT_CAT <> '01-PAPER'
	AND IQ_AVAIL > 0
	AND IQ_BO > 0
	AND IT_QUARANTINED = 0
	AND IT_CUST <>  '01-DEWR'
	AND IT_CUST <>  '01-CMLBIL'
	AND IT_CUST <>  '01-CMLKMA'
	AND IT_CUST <>  '01-CMLTYR'
	AND IT_CUST <>  '01-TOYFIN'
	AND IQ_ON_ORDER < 1
	AND IT_STOCK NOT LIKE 'CEX%'
	AND IT_STOCK NOT LIKE 'CBI%'
ORDER BY IT_STOCK


--Admin Order Data


CREATE TABLE Tmp_Admin_Data
(       vSH_ORDER VARCHAR(255), vSH_CUST VARCHAR(255), vST_PICK VARCHAR(255), vST_DESP_DATE VARCHAR(255), vSD_STOCK VARCHAR(255), vSD_LINE VARCHAR(255), vStock VARCHAR(255), vFeeDesc VARCHAR(255), vFee VARCHAR(255)
)




/*decalre variables*/
var cust varchar2(20)
exec :cust := 'TABCORP'
var stock varchar2(20)
exec :stock := 'COURIER'
var source varchar2(20)
exec :source := 'BSPRINTNSW'
var anal varchar2(20)
exec :anal := '72'
var start_date varchar2(20)
exec :start_date := To_Date('26-Jun-2013')
var end_date varchar2(20)
exec :end_date := To_Date('30-Jun-2013')




INSERT into Tmp_Admin_Data(vSH_ORDER, vSH_CUST, vST_PICK, vST_DESP_DATE, vSD_STOCK, vSD_LINE, vStock, vFeeDesc, vFee)
VALUES ('232323','Cust','Pick','Date', 'PickFee','1','Pickfee','Pickfee','5'),

TRUNCATE TABLE TMP_DROP_LIST;
 INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(1,'Enterprise');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(2,'Supported');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(3,'DB Real Estate');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(4,'DB Retail');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(5,'DB Private Banking');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(6,'CFS');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(7,'CFSADV');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(8,'CFP');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(9,'FW');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(10,'PROM');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(11,'GAM PAI');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(12,'OSF');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(13,'Bright Eyes');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(14,'Budget');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(15,'Laubmann');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(16,'OPSM');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(17,'OPSM NZ');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(18,'Sunglass Hut');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(19,'Sunglass Worx');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(20,'Vision Plus');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(21,'GAM');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(22,'FINWIS');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(23,'BWFA');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(24,'CFP Merch');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(25,'FINWIS Merch');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(26,'KENO BDM');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(27,'KENO VENUE');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(28,'Super User');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(29,'WAGERING BDM');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(30,'WAGERING VENUE');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(31,'GAMING VENUE');
INSERT into TMP_DROP_LIST(DV_INDEX,DV_VALUE)VALUES(32,'CFSESST');




SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK, t.ST_DESP_DATE,d.SD_STOCK AS "SD_STOCK", d.SD_LINE,
          CASE   /* Get Stock*/
	        WHEN ((r.RM_XX_FEE01 IS NOT NULL) AND (s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4)) THEN 'OrderEntry'
          WHEN ((r.RM_XX_FEE08 IS NOT NULL) AND (i.IM_TYPE = 'BB_PACK')) THEN 'Packing'
          WHEN ((r.RM_XX_FEE25 IS NOT NULL) AND (s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE')) THEN 'Destruction'
          WHEN ((r.RM_XX_FEE16 IS NOT NULL) AND (d.SD_STOCK NOT like 'COURIER%')) THEN 'Pick'
          WHEN ((r.RM_XX_FEE06 IS NOT NULL) AND (d.SD_LINE IS NOT NULL)) THEN 'Handeling'
          WHEN d.SD_STOCK like 'COURIER%' THEN 'Freight'
          ELSE d.SD_STOCK
          --ELSE
          END AS "SD_STOCK"




FROM pwin175.SH s
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
,pwin175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK


WHERE r.RM_ANAL = :anal
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_XX_PICKLIST_NUM))
AND s.SH_ORDER = t.ST_ORDER
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND (t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date)
AND s.SH_ORDER = '   1287140'



  IF (SELECT vSH_ORDER FROM Tmp_Admin_Data WHERE vSH_ORDER='232323')= IS NOT NULL
      UPDATE
            Tmp_Admin_Data
      SET
            vSH_ORDER='123456'
      WHERE
            vSH_ORDER='232323'

  ELSE

      INSERT into Tmp_Admin_Data(vSH_ORDER, vSH_CUST, vST_PICK, vST_DESP_DATE, vSD_STOCK, vSD_LINE, vStock, vFeeDesc, vFee)
      VALUES ('232323','Cust','Pick','Date', 'PickFee','1','Pickfee','Pickfee','5')


GROUP BY SH_ORDER, SH_CUST, ST_PICK, ST_DESP_DATE,SH_NUM_LINES, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_CAMPAIGN, SH_NOTE_2 , ST_WEIGHT, ST_PACKAGES,SD_STOCK,SD_SELL_PRICE,
SH_SPARE_DBL_9,ST_XX_NUM_PALLETS,ST_XX_NUM_CARTONS,ST_XX_NUM_PAL_SW , SD_LINE ,RM_XX_FEE01,RM_XX_FEE08,
RM_XX_FEE25,RM_XX_FEE16,RM_XX_FEE06,IM_TYPE
ORDER BY SH_ORDER, SD_LINE


select *  from Tmp_Admin_Data

drop table Tmp_Admin_Data



--End Admin Order Data







SELECT DISTINCT
     T1.MyField1,
     T1.MyField2,
     T1.MyField3,
     T1.MyField4,
     T1.MyField5
FROM
     MyTable T1
LEFT OUTER JOIN MyTable T2 ON
     T2.MyField1 = T1.MyField1 AND
     T2.MyField2 = T1.MyField2 AND
     T2.MyField3 = T1.MyField3 AND
     (
          T2.MyField4 > T1.MyField4 OR
          (
               T2.MyField4 = T1.MyField4 AND
               T2.MyField5 > T1.MyField5
          )
     )
WHERE
     T2.MyField1 IS NULL







	 --Admin Order Data


var cust varchar2(20)
exec :cust := 'BEYONDBLUE'
var stock varchar2(20)
exec :stock := 'COURIER'
var source varchar2(20)
exec :source := 'BSPRINTNSW'
var anal varchar2(20)
exec :anal := '75'
var start_date varchar2(20)
exec :start_date := To_Date('1-Jun-2013')
var end_date varchar2(20)
exec :end_date := To_Date('30-Jun-2013')

/*Get OrderEntryFee*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
 CASE   /* Swap Stock code with Fee Type*/
	        WHEN s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4 THEN  'OrderFee'
          ELSE ''
          END AS "FeeDescription",
 CASE   /* Swap description with Fee Type*/
	        WHEN s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4 THEN  NULL ||  (Select RM_XX_FEE01 from RM where RM_CUST = :cust)
          ELSE ''
          END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (s.SH_SPARE_DBL_9 = 1 OR s.SH_SPARE_DBL_9 = 3 OR s.SH_SPARE_DBL_9 = 2 OR s.SH_SPARE_DBL_9 = 4)
AND d.SD_LINE = 1



UNION ALL

/*Get PackingFee*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   /* Swap Stock code with Fee Type*/
	         WHEN i.IM_TYPE = 'BB_PACK'  THEN 'Packing Fee is '
            ELSE ''
          END AS "FeeDescription",
  CASE    /* Get Packing Fees If stock is of type BB_PACK then charge sRM_XX_FEE08.AsDouble * SL_PSLIP_QTY  */
	         WHEN i.IM_TYPE = 'BB_PACK'  THEN '' ||  (Select RM_XX_FEE08 from RM where RM_CUST = :cust)
            ELSE ''
            END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE (r.RM_ANAL = :anal)
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND (t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date )
AND (i.IM_TYPE = 'BB_PACK')
AND d.SD_LINE = 1



UNION ALL

/* Get Destruction Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE' THEN 'Destruction Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE' THEN '' ||  (Select RM_XX_FEE25 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (s.SH_NOTE_1 = 'DESTROY' OR s.SH_CAMPAIGN = 'OBSOLETE')
AND d.SD_LINE = 1



UNION ALL

/* Get Emergency Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC' THEN /*'Emergency Fee is '*/'' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC' THEN /*'Emergency Fee is '*/'' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (d.SD_STOCK = 'EMERQSRFEE' OR s.SH_CAMPAIGN = 'TABSPEC')
AND d.SD_LINE = 1


UNION ALL

/* Get Pallet Despatch Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_PALLETS >= 1 THEN 'Pallet Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_PALLETS >= 1 THEN '' ||  (Select RM_XX_FEE17 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_PALLETS >= 1)
AND d.SD_LINE = 1


UNION ALL

/* Get Carton Despatch Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_CARTONS >= 1 THEN 'Carton Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_CARTONS >= 1 THEN '' ||  (Select RM_XX_FEE17 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_CARTONS >= 1)
AND d.SD_LINE = 1


UNION ALL

/* Get ShrinkWrap Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN ST_XX_NUM_PAL_SW >= 1 THEN 'ShrinkWrap Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE     WHEN ST_XX_NUM_PAL_SW >= 1 THEN '' ||  (Select RM_XX_FEE18 from RM where RM_CUST = :cust )
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND (ST_XX_NUM_PAL_SW >= 1)
AND d.SD_LINE = 1


UNION ALL

/* Get Pick Fees
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Pick Fee'
         ELSE ''
         END AS "Stock",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN '' || (Select RM_XX_FEE16 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND d.SD_STOCK NOT LIKE :stock
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_LAST_PICK_NUM))
--AND s.SH_ORDER = '   1334679'
--AND d.SD_LINE = 1





UNION ALL   */

/* Get Handeling Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN (d.SD_LINE = 1) THEN 'Handeling Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN d.SD_LINE = 1 THEN '' ||  (Select RM_XX_FEE06 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND ((d.SD_LAST_PICK_NUM = t.ST_PICK OR d.SD_XX_PICKLIST_NUM = t.ST_PICK OR d.SD_STOCK = :stock ))
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1344426'
AND d.SD_LINE = 1



UNION ALL

/* Get Freight Fees*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK like 'COURIER%' THEN 'Freight Fee is '
         ELSE 'Pick Fee is '
         END AS "FeeDescription",
  CASE   WHEN d.SD_STOCK like 'COURIER%' THEN '' || CAST(d.SD_SELL_PRICE AS VARCHAR(20))
         ELSE '' || (Select RM_XX_FEE16 from RM where RM_CUST = :cust)
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM pwin175.SH s
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
,pwin175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
WHERE SH_ORDER = SD_ORDER
AND r.RM_ANAL = :anal
AND SH_ORDER = ST_ORDER
AND LTRIM(RTRIM(ST_PICK)) = LTRIM(RTRIM(SD_XX_PICKLIST_NUM))
--AND SD_XX_PICKLIST_NUM <> ''
--AND (SL_PICK_QTY >= 1)
--AND SD_STOCK like :stock
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
--AND s.SH_ORDER = '   1334679'



UNION ALL

/* Get Stock Lines*/
SELECT DISTINCT s.SH_ORDER, s.SH_CUST, t.ST_PICK,t.ST_PSLIP, t.ST_DESP_DATE, s.SH_ADDRESS, s.SH_SUBURB, s.SH_CITY,
s.SH_STATE, s.SH_POST_CODE, s.SH_NOTE_1, s.SH_NOTE_2 , t.ST_WEIGHT, t.ST_PACKAGES,d.SD_STOCK AS "Stock", d.SD_LINE,d.SD_SELL_PRICE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE,s.SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Pick Fee is '
         ELSE ''
         END AS "FeeDescription",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN '' || (Select RM_XX_FEE16 from RM where RM_CUST = :cust)
         ELSE ''
         END AS "Fee",
  CASE   WHEN d.SD_STOCK NOT like 'COURIER%' THEN 'Stock Unit Price is '  || (Select i.IM_REPORTING_PRICE from IM i where i.IM_STOCK = d.SD_STOCK)
         ELSE ''
         END AS "Stock Unit Price"
FROM PWIN175.ST t
INNER JOIN PWIN175.SD d ON d.SD_ORDER  = t.ST_ORDER
INNER JOIN PWIN175.IM i ON i.IM_STOCK = d.SD_STOCK
INNER JOIN PWIN175.SH s ON s.SH_ORDER = d.SD_ORDER
INNER JOIN PWIN175.RM r ON r.RM_CUST  = s.SH_CUST
--WHERE r.RM_SOURCE = :source
WHERE r.RM_ANAL = :anal
AND (d.SD_LAST_PICK_NUM = t.ST_PICK )
AND t.ST_DESP_DATE >= :start_date AND t.ST_DESP_DATE <= :end_date
AND d.SD_STOCK != :stock

GROUP BY SH_ORDER, SH_CUST, ST_PICK,ST_PSLIP, ST_DESP_DATE, SH_ADDRESS, SH_SUBURB, SH_CITY,
SH_STATE, SH_POST_CODE, SH_NOTE_1, SH_NOTE_2 , ST_WEIGHT, ST_PACKAGES,SD_STOCK, SD_LINE,SD_SELL_PRICE,SD_EXCL, SD_INCL, SD_XX_OW_UNIT_PRICE,SH_SPARE_DBL_9,SD_XX_PICKLIST_NUM,ST_XX_NUM_PALLETS,ST_XX_NUM_CARTONS,ST_XX_NUM_PAL_SW , SD_LINE ,IM_TYPE,d.SD_EXCL, d.SD_INCL, d.SD_XX_OW_UNIT_PRICE
ORDER BY SH_ORDER, SD_LINE
--End Admin Order Data



//'Pickslip Count by Parent '/
SELECT Count(ST_PICK) AS "Number Of Picks", ST_ORDER, RM_CUST
FROM SH, RM ,ST
WHERE SH_CUST = RM_CUST
AND RM_PARENT LIKE '21%'
AND ST_ORDER = SH_ORDER
GROUP BY ST_ORDER,RM_CUST


//'Pickslip Count by Cust '/
SELECT Count(ST_PICK) AS "Number Of Picks", ST_ORDER, RM_CUST
FROM SH, RM ,ST
WHERE SH_CUST = RM_CUST
AND RM_PARENT = '' AND RM_CUST LIKE '21*'
AND ST_ORDER = SH_ORDER
GROUP BY ST_ORDER,RM_CUST



//'Order Count by Parent  '/
SELECT Count(SH_ORDER) AS "Number Of Orders", SH_ORDER, RM_CUST
FROM SH, RM
WHERE SH_CUST = RM_CUST
AND RM_PARENT LIKE '21%'
GROUP BY SH_ORDER,RM_CUST


//'Order Count by Cust  '/
SELECT Count(SH_ORDER) AS "Number Of Orders", SH_ORDER, RM_CUST
FROM SH, RM
WHERE SH_CUST = RM_CUST
AND RM_PARENT = '' AND RM_CUST LIKE '21*'
GROUP BY SH_ORDER,RM_CUST




//'SD Count by Parent  '/
SELECT SD_ORDER, RM_CUST, RM_PARENT,
CASE
  WHEN SH_STATUS = 0 THEN 'AWAITING '
  WHEN SH_STATUS = 1 THEN 'LIVE '
  WHEN SH_STATUS = 2 THEN 'DESPATCHED '
  WHEN SH_STATUS = 3 THEN 'CANCELLED '
  WHEN SH_STATUS = 4 THEN 'CLOSED '
END AS SH_STATUS,
CASE
  WHEN SD_STATUS = 0 THEN 'AWAITING '
  WHEN SD_STATUS = 1 THEN 'LIVE '
  WHEN SD_STATUS = 2 THEN 'DESPATCHED '
  WHEN SD_STATUS = 3 THEN 'CANCELLED '
  WHEN SD_STATUS = 4 THEN 'CLOSED '
END AS SD_STATUS,   SD_LINE
FROM SH, RM ,SD
WHERE SH_CUST = RM_CUST
AND SD_ORDER = SH_ORDER
AND RM_PARENT LIKE '21%'
GROUP BY SD_ORDER, RM_CUST, RM_PARENT, SH_STATUS, SD_STATUS, SD_LINE
ORDER BY SD_ORDER, SD_LINE



//'SD Count by Cust  '/
SELECT SD_ORDER, SH_CUST, RM_PARENT,
CASE
  WHEN SH_STATUS = 0 THEN 'AWAITING '
  WHEN SH_STATUS = 1 THEN 'LIVE '
  WHEN SH_STATUS = 2 THEN 'DESPATCHED '
  WHEN SH_STATUS = 3 THEN 'CANCELLED '
  WHEN SH_STATUS = 4 THEN 'CLOSED '
END AS SH_STATUS,
CASE
  WHEN SD_STATUS = 0 THEN 'AWAITING '
  WHEN SD_STATUS = 1 THEN 'LIVE '
  WHEN SD_STATUS = 2 THEN 'DESPATCHED '
  WHEN SD_STATUS = 3 THEN 'CANCELLED '
  WHEN SD_STATUS = 4 THEN 'CLOSED '
END AS SD_STATUS,   SD_LINE
FROM SH, RM ,SD
WHERE SH_CUST = RM_CUST
AND SD_ORDER  = SH_ORDER
AND RM_CUST   IN ( '21ACROW','21ELILILLY', '21IOOF', '21JELDWEN', '21QBEINSUR')
GROUP BY SD_ORDER, SH_CUST, RM_PARENT, SH_STATUS, SD_STATUS , SD_LINE
ORDER BY SD_ORDER, SD_LINE




var cust varchar2(20)
exec :cust := 'RTA'
var cust2 varchar2(20)
exec :cust2 := 'BEYONDBLUE'
var ordernum varchar2(20)
exec :ordernum := '1363806'
var stock varchar2(20)
exec :stock := 'COURIER'
var source varchar2(20)
exec :source := 'BSPRINTNSW'
var anal varchar2(20)
exec :anal := '21VICP'
var start_date varchar2(20)
exec :start_date := To_Date('01-Jan-2014')
var end_date varchar2(20)
exec :end_date := To_Date('31-Jan-2014')
var warehouse varchar2(20)
exec :warehouse := 'SYDNEY'
var warehouse2 varchar2(20)
exec :warehouse2 := 'MELBOURNE'
var month_date varchar2(20)
exec :month_date := substr(:end_date,4,3)
var year_date varchar2(20)
exec :year_date := substr(:end_date,8,2)

--Clear All Data
DROP TABLE Tmp_Group_Cust;
--ReCreate
CREATE TABLE Tmp_Group_Cust ( sGroupCust VARCHAR2(20), sCust VARCHAR2(20), nLevel NUMBER);
--Check Table is empty
SELECT * FROM Tmp_Group_Cust

--This gives a unique list of all customers grouped by top tier parent - use this when collecting stats per client
INSERT into Tmp_Group_Cust(sCust,sGroupCust,nLevel )
                SELECT RM_CUST
                        ,(
                          CASE
                            WHEN LEVEL = 1 THEN RM_CUST
                            WHEN LEVEL = 2 THEN RM_PARENT
                            WHEN LEVEL = 3 THEN PRIOR RM_PARENT
                            WHEN LEVEL = 4 THEN 'COLESGROUP'
                            ELSE 'STILLNOGROUPCUST'
                          END
                        ) AS CC
                        ,LEVEL
                  FROM RM
                  WHERE RM_TYPE = 0
                  AND RM_ACTIVE = 1
                  --AND Length(RM_GROUP_CUST) <=  1
                  CONNECT BY PRIOR RM_CUST = RM_PARENT
                  START WITH Length(RM_PARENT) <= 1

                  --START WITH RM_PARENT = ' '         --This is just as fine as above
--perfect
--Check Results
--SELECT sCust,sGroupCust FROM  Tmp_Group_Cust WHERE sCust = 'AU_GPP_JT'
--GROUP BY sGroupCust,SCust


/*Total Orders by Month all custs grouped by warehouse/top level parent */  --  2.58s  Returns 122 rows this gives the correct totals   - grand total 15538

SELECT  (CASE
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
            ELSE 'NOLOCN'
            END) AS Warehouse,
        sGroupCust,

         Count(*) AS Total,
         'A- Orders' AS "Type"
FROM Tmp_Group_Cust r INNER JOIN SH h ON RTrim(h.SH_CUST) = RTrim(r.sCust)
     INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
     --INNER JOIN IM m ON m.IM_STOCK = d.SD_STOCK
     INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
AND h.SH_STATUS <> 3
AND h.SH_CAMPAIGN NOT LIKE 'ADMIN'
AND h.SH_CAMPAIGN NOT LIKE 'OBSOLETE'
AND d.SD_DISPLAY = 1
AND r2.RM_ACTIVE = 1   --This was the problem
GROUP BY ROLLUP (
                ( CASE
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
                  ELSE 'NOLOCN'
                  END
                ),
                sGroupCust
                )
ORDER BY 1,2 ASC



/*Total Orders by Month all custs grouped by warehouse/Cust/top level parent */  --  2.38s  Returns 4482 rows this gives the correct totals - grand total is 15538

SELECT  (CASE
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
            ELSE 'NOLOCN'
            END) AS Warehouse,
        sCust,
        sGroupCust,

         Count(*) AS Total,
         'A- Orders' AS "Type"
FROM SH h INNER JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
     INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
     INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
AND h.SH_STATUS <> 3
AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
AND d.SD_DISPLAY = 1
AND r2.RM_ACTIVE = 1   --This was the problem
GROUP BY ROLLUP (
                ( CASE
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
                  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
                  ELSE 'NOLOCN'
                  END
                ),
                sGroupCust,
                sCust
                )
ORDER BY 1,2 ASC



/*ORDER COUNT CHECKS*/
  --The above 3 queries should total to this query   15538
  SELECT Count(h.SH_ORDER)
  FROM SH h INNER JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
  INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
  INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
  WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
  AND h.SH_STATUS <> 3
  AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
  AND d.SD_DISPLAY = 1
  AND r2.RM_ACTIVE = 1   --This was the problem

  --Even with distinct right join 15538
  SELECT Count(DISTINCT h.SH_ORDER)
  --SELECT h.SH_ORDER,SH_CUST,SH_CAMPAIGN, substr(To_Char(h.SH_ADD_DATE),0,10) AS AddDate
  FROM SH h RIGHT JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
  INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
  INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
  WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
  AND h.SH_STATUS <> 3
  AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
  AND d.SD_DISPLAY = 1
  AND r2.RM_ACTIVE = 1   --This was the problem

  --Total Order Count Matches to Prism output and above query with sd join     15538
  SELECT Count(h.SH_ORDER)
  --SELECT h.SH_ORDER,SH_CUST,SH_CAMPAIGN, substr(To_Char(h.SH_ADD_DATE),0,10) AS AddDate
  FROM SH h INNER JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
  INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
  INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
  WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
  AND h.SH_STATUS <> 3
  AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
  AND d.SD_DISPLAY = 1
  AND r2.RM_ACTIVE = 1   --This was the problem

/*END ORDER COUNT CHECKS */


UNION ALL

/*Total Despatches by Month all custs grouped by cust */  --  1.5s

SELECT (
          CASE
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
            ELSE 'NOLOCN'
            END) AS Warehouse,
             sGroupCust,
            Count(*) AS Total,
            'B- Despatches' AS "Type"
FROM PWIN175.SL s INNER JOIN SH h ON s.SL_ORDER = h.SH_ORDER
    RIGHT JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
    INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
    INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
    INNER JOIN IL l ON l.IL_LOCN = s.SL_LOCN
    INNER JOIN ST t ON t.ST_PICK = s.SL_PICK
WHERE s.SL_EDIT_DATE >= :start_date AND s.SL_EDIT_DATE <= :end_date
AND s.SL_LINE = 1
AND s.SL_PSLIP IS NOT NULL
AND h.SH_STATUS <> 3
AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
AND r2.RM_ACTIVE = 1   --This was the problem
GROUP BY ROLLUP ((CASE
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
            WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
            ELSE 'NOLOCN'
            END),
             sGroupCust )
--ORDER BY 2,1

UNION ALL

/*Total Lines by Month all custs grouped by cust */  --  5.7s

SELECT (CASE
            WHEN r.RM_PARENT = ' ' THEN h.SH_CUST
            WHEN r.RM_PARENT != ' ' THEN r.RM_PARENT
            ELSE NULL END) AS Cust,
            l.IL_IN_LOCN AS Warehouse,
            Count(*) AS Total,
            'C- Lines' AS "Type"
FROM PWIN175.SL s INNER JOIN SH h ON s.SL_ORDER = h.SH_ORDER
    INNER JOIN RM r ON r.RM_CUST = h.SH_CUST
    INNER JOIN IL l ON l.IL_LOCN = s.SL_LOCN
    INNER JOIN ST t ON t.ST_PICK = s.SL_PICK
WHERE s.SL_EDIT_DATE >= :start_date AND s.SL_EDIT_DATE <= :end_date
AND s.SL_PSLIP IS NOT NULL
AND h.SH_CAMPAIGN NOT LIKE 'ADMIN'
AND h.SH_CAMPAIGN NOT LIKE 'OBSOLETE'
GROUP BY ROLLUP (l.IL_IN_LOCN,(CASE
            WHEN r.RM_PARENT = ' ' THEN h.SH_CUST
            WHEN r.RM_PARENT != ' ' THEN r.RM_PARENT
            ELSE NULL END))
--ORDER BY 2,1



UNION ALL

/*This should list Total receipts by type grouped by warehouse for all customers */ --1.1s
SELECT i.IM_CUST AS Cust,
       l.IL_IN_LOCN AS Warehouse,
       Count(e.NE_ENTRY) AS Total,
       'D- Receipts'  AS "Type"
FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
           INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
           INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
WHERE e.NE_QUANTITY >= '1'
AND   e.NE_TRAN_TYPE =  1
AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD')
AND   e.NE_STRENGTH = 3
AND   n.NA_EXT_TYPE = 1210067
AND   (e.NE_STATUS = 1 OR e.NE_STATUS = 3)
AND   e.NE_DATE >= :start_date AND e.NE_DATE <= :end_date
AND   IL_PHYSICAL = 1
GROUP BY ROLLUP (l.IL_IN_LOCN,i.IM_CUST)
--ORDER BY 2,1

UNION ALL

/*This should list Total spaces by type grouped by warehouse for all customers */ --11.00s
SELECT i.IM_CUST AS Cust,
       l.IL_IN_LOCN AS Warehouse,
       Count(DISTINCT l.IL_LOCN) AS Total,  -- test a self join to rid the distinct
       (CASE WHEN Upper(substr(l.IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
                                                        ELSE 'F- Shelves'
        END) AS "Type"
FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
           INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
           INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
WHERE n.NA_EXT_TYPE = 1210067
AND e.NE_AVAIL_ACTUAL >= '1'
AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD')
AND e.NE_STATUS =  1
AND e.NE_STRENGTH = 3
GROUP BY ROLLUP (l.IL_IN_LOCN, (CASE WHEN Upper(substr(l.IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
                                                        ELSE 'F- Shelves'
        END) ,i.IM_CUST   )
ORDER BY 2,1,4
/*This one works and is the master for spaces occupied monthly by cust by warehouse. */





SELECT r1.RM_CUST, r1.RM_PARENT
FROM RM r1
WHERE  r1.RM_CUST IN (
                  SELECT DISTINCT (--RM_CUST, RM_PARENT, RM_NAME, LEVEL,
                      CASE
                          WHEN LEVEL = 3 THEN PRIOR RM_PARENT
                          WHEN LEVEL = 2 THEN RM_PARENT
                          ELSE RM_CUST END )
                          AS CC
                  FROM RM
                  WHERE RM_TYPE = 0
                  AND RM_ACTIVE = 1
                  AND RM_GROUP_CUST = ' '
                  CONNECT BY RM_PARENT = prior RM_CUST
                  START WITH RM_PARENT = ' ' --LIKE '% %'
                  --ORDER SIBLINGS BY RM_PARENT
                )

UNION ALL
SELECT r1.RM_CUST,r1.RM_PARENT
FROM RM r1
WHERE  r1.RM_CUST IN (
                  SELECT RM_CUST
                  FROM
                    RM
                  WHERE RM_TYPE = 0
                  AND RM_ACTIVE = 1
                  AND RM_GROUP_CUST = ' '
                  CONNECT BY PRIOR RM_CUST = RM_PARENT
                  START WITH RM_PARENT = ' '

                )

ORDER BY 1


SELECT CASE  WHEN LENGTH(RM_PARENT) = 0 THEN  'NULL PARENT'
              WHEN LENGTH(RM_PARENT) > 0 THEN  'NOT NULL PARENT'
              END AS Parent,
              RM_CUST FROM RM
WHERE RM_TYPE = 0
AND RM_ACTIVE = 1
AND Length(RM_GROUP_CUST) = 1    --Just this this give the correct results 26499
AND Length(RM_PARENT) != 1     --this give the correct results 667 Parents only  //when set to not 1 we get 25834
GROUP BY RM_GROUP_CUST, RM_PARENT, RM_CUST










--This give a heirarchial view of all customers grouped by parent/grandparent, levels in column
SELECT r.RM_NAME, r.RM_CUST, r.RM_PARENT, LEVEL
FROM RM r
WHERE r.RM_TYPE = 0
AND r.RM_ACTIVE = 1
AND r.RM_GROUP_CUST LIKE '% %'
START WITH r.RM_PARENT LIKE '% %'
CONNECT BY PRIOR r.RM_CUST = r.RM_PARENT
ORDER SIBLINGS BY r.RM_NAME



--This give a heirarchial view of all customers grouped by parent/grandparent, levels are padded
SELECT
   CONCAT
   (
      LPAD
      (
         ' ',
         LEVEL*4-4
      ),
      RM_CUST
   ) Cust
FROM
   RM
WHERE RM_TYPE = 0
AND RM_ACTIVE = 1
AND RM_GROUP_CUST = ' '
CONNECT BY PRIOR RM_CUST = RM_PARENT
START WITH RM_PARENT = ' '
--ORDER SIBLINGS BY RM_CUST



SELECT RM_CUST
FROM
   RM
WHERE RM_TYPE = 0
AND RM_ACTIVE = 1
AND RM_GROUP_CUST = ' '
CONNECT BY PRIOR RM_CUST = RM_PARENT
START WITH RM_PARENT = ' '



--This give a heirarchial view of all customers grouped by parent/grandparent, levels are padded   <.5s returns 26549
SELECT
   CONCAT
   (
      LPAD
      (
         ' ',
         LEVEL*4-4
      ),
      RM_CUST
   ) Cust
FROM
   RM
WHERE RM_TYPE = 0
AND RM_ACTIVE = 1
--AND RM_GROUP_CUST = ' '
CONNECT BY PRIOR RM_CUST = RM_PARENT
START WITH RM_PARENT LIKE '% %'
--ORDER SIBLINGS BY RM_CUST






--Count Parents
SELECT Count(RM_CUST)
FROM RM
WHERE RM_TYPE = 0
AND RM_GROUP_CUST = ' '
AND RM_PARENT = ' '
AND RM_ACTIVE = 1






--Count for all customer, this should match the total output of the above parent selects  <.5s returns 26497
SELECT Count(*)
FROM RM
WHERE RM_TYPE = 0
AND RM_GROUP_CUST = ' '
AND RM_ACTIVE = 1

--Returns the Oracle database version
SELECT * FROM v$version;

--Get Oracle version
SELECT VALUE
  FROM v$system_parameter
 WHERE name = 'compatible';




DECLARE

        /* Output variables to hold the result of the query: */

 2)     a T1.e%TYPE;

 3)     b T1.f%TYPE;

        /* Cursor declaration: */

 4)     CURSOR T1Cursor IS

 5)         SELECT e, f

 6)         FROM T1

 7)         WHERE e < f

 8)         FOR UPDATE;

 9) BEGIN

10)     OPEN T1Cursor;

11)     LOOP

            /* Retrieve each row of the result of the above query

               into PL/SQL variables: */

12)         FETCH T1Cursor INTO a, b;

            /* If there are no more rows to fetch, exit the loop: */

13)         EXIT WHEN T1Cursor%NOTFOUND;

            /* Delete the current tuple: */

14)         DELETE FROM T1 WHERE CURRENT OF T1Cursor;

            /* Insert the reverse tuple: */

15)         INSERT INTO T1 VALUES(b, a);

16)     END LOOP;

        /* Free cursor used by the query. */

17)     CLOSE T1Cursor;

18) END;

19) .

20) run;



SELECT RJ_EXT_KEY,RJ_NOTE,RJ_NOTE,RI_CODE, QM_JOB_NUM , QM_CUST_CODE
FROM RJ  INNER JOIN RI ON RI_AVAIL_CODE_ID = RJ_RI_AVAIL_CODE_ID
    INNER JOIN QM ON QM_UID = RJ_EXT_KEY
    INNER JOIN RH ON RH_REF_CODE_ID = RI_RH_REF_CODE_ID
    INNER JOIN YH ON YH_CODE_ID = RH_YH_CODE_ID
WHERE QM_CUST_CODE = 'VHAAUS'


SELECT II_STOCK,II_CUST,II_BREAK_LCL
							FROM II INNER JOIN IM ON IM_STOCK = II_STOCK
							AND II_BREAK_LCL > 0.000001
SELECT LTrim(ST_PICK),LTrim(ST_PSLIP), substr(To_Char(ST_DESP_DATE),0,10), ST_WEIGHT, ST_PACKAGES,ST_XX_NUM_PAL_SW,ST_XX_NUM_PALLETS,ST_XX_NUM_CARTONS
							FROM ST LEFT JOIN SH ON SH_ORDER = ST_ORDER
							WHERE ST_DESP_DATE >= '1-Jun-2015' AND ST_DESP_DATE <= '30-Jun-2015'	AND ST_PSLIP != 'CANCELLED'
							AND SH_STATUS <> 3

SELECT MAX(SL_LINE),LTrim(SL_PICK), LTrim(SL_ORDER), LTrim(SL_PSLIP),TP.vDateDesp, TP.vPackages,TP.vWeight,TP.vST_XX_NUM_PAL_SW,TP.vST_XX_NUM_PALLETS,TP.vST_XX_NUM_CARTONS
							FROM Tmp_Admin_Data_Pickslips TP RIGHT JOIN SL ON LTrim(SL_PICK) = TP.vPickslip WHERE SL_EDIT_DATE >= '1-Jun-2015' AND SL_EDIT_DATE <= '30-Jun-2015'
							GROUP BY SL_PICK,SL_ORDER,SL_PSLIP,TP.vDateDesp,TP.vPackages,TP.vWeight,TP.vST_XX_NUM_PAL_SW,TP.vST_XX_NUM_PALLETS,TP.vST_XX_NUM_CARTONS

SELECT nz.NI_STOCK, LTrim(RTrim(nz.NI_SL_PSLIP)), CAST((NX_SELL_VALUE/NX_QUANTITY) AS DECIMAL(22,2)) AS "UnitPrice", CAST(xz.NX_SELL_VALUE AS DECIMAL(22,2)), xz.NX_QUANTITY
						FROM  NX xz INNER JOIN NI nz ON nz.NI_NX_MOVEMENT = xz.NX_MOVEMENT
						INNER JOIN NE ez ON ez.NE_ENTRY = nz.NI_ENTRY AND ez.NE_PRICE_ENTRY = xz.NX_ENTRY
						WHERE ez.NE_NV_EXT_TYPE = 1810105
						AND ez.NE_STRENGTH = 3
						AND xz.NX_SELL_VALUE > 0 AND xz.NX_SELL_VALUE IS NOT NULL
						AND xz.NX_QUANTITY > 1
						AND ez.NE_ADD_DATE >= '1-Jun-2015' AND ez.NE_ADD_DATE <= '30-Jun-2015'
						GROUP BY nz.NI_STOCK, nz.NI_SL_PSLIP, xz.NX_SELL_VALUE, xz.NX_QUANTITY

SELECT LAST_DAY( sysdate ) FROM dual;


SELECT To_Date(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYYMMDD')  from dual;


SELECT LAST_DAY(ADD_MONTHS(sysdate,-2)) from dual;

select  to_char(to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD'),'YYYY-MM-DD'),'YYYY-MM-DD') AS "todate",
        CAST((to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'YYYY-MM-DD'),'YYYY-MM-DD') + 1) AS VARCHAR(10)) AS "Fromdate"  from dual;

select  to_char(to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD'),'YYYY-MM-DD'),'YYYY-MM-DD') AS "todate",
        to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'YYYY-MM-DD'),'YYYY-MM-DD') + 1 AS "Fromdate"  from dual;



 CAST((NX_SELL_VALUE/NX_QUANTITY) AS DECIMAL(22,2))
select to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY'),'DD-MM-YYYY'),to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY'),'DD-MM-YYYY') + 1   from dual;

SELECT to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)) + 1,'YYYY-MM-DD') AS "START DATE", to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD') AS "END DATE" from dual;

select to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'DD-MM-YYYY')  from dual;

select to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY')   from dual;



SELECT  Max(LAST_DAY(ADD_MONTHS(SYSDATE, -2)) + level)
FROM    dual
CONNECT BY
    level <= LAST_DAY(ADD_MONTHS(SYSDATE, -1)) - LAST_DAY(ADD_MONTHS(SYSDATE, -2))


SELECT CAST(SYSDATE) AS VARCHAR(10), TO_CHAR(sysdate, 'YYYY-MM-DD') FROM dual


SELECT to_char(sysdate,'YYYYMMDD') FROM dual;


SELECT to_char(sysdate,'YYYY-MM-DD') FROM dual;


select to_char(trunc(trunc(sysdate, 'MM') - 1, 'MM'),'DD-MM-YYYY') "First Day of Last Month",
to_char(trunc(sysdate, 'MM') - 1,'DD-MM-YYYY') "Last Day of Last Month"
from dual



SELECT * FROM Tmp_Admin_Data_Pick_LineCounts

SELECT * FROM all_source
where UPPER(TEXT) like UPPER('%F_GET_PDS_COUNTS%')



SELECT * FROM TMP_M_XX_FREIGHT


SELECT * FROM TMP_GROUP_CUST WHERE  sgroupcust = 'IAG'




  Select SD_ORDER,','
 ,SD_LINE,','
 ,SD_NOTE_1 AS "SD_NOTE_1",','
 ,SD_SELL_PRICE + (f_calc_freight_fee(SD_SELL_PRICE,TRIM(SD_NOTE_1),'IAG',SD_ORDER)/100)  AS "Calc MU",','
 ,SD_SELL_PRICE   AS "SD_SELL_PRICE",','
 ,SD_COST_PRICE   AS "SD_COST_PRICE",','
 ,f_calc_freight_fee(SD_SELL_PRICE,TRIM(SD_NOTE_1),'IAG',SD_ORDER)
 FROM SD Where SD_ORDER >= '   1740626' AND  SD_ORDER <= '   1740626' AND SD_STOCK LIKE 'COURIER%' AND   SD_SELL_PRICE > 0.1 AND SD_CUST = 'IAG';


 Select /* csv */ * From TMP_HANDLING_FEES


 ALTER TABLE customers
  ADD (customer_name varchar2(45),
       city varchar2(40));


declare
  cursor c_t is select table_name from user_tables where table_name LIKE 'TMP_%' order by table_name;
  szSql varchar2(2048);
begin
  for rec in c_t loop
    szSql := 'TRUNCATE table '||rec.table_name||;
    dbms_output.put_line(szSql);
    execute immediate szSql;
  end loop;
end;
/
SELECT IM_DESC FROM IM WHERE IM_STOCK  = 'SUP606'

--Superpartners correct YTD issues
SELECT NI_STOCK,Sum(NI_QUANTITY)--,NI_DATE,IC_PERIOD_NAME(4), ((SELECT IC_THIS_ERA FROM IC) - 200 ) AS "ERA" --,(SELECT EXTRACT(YEAR FROM ToDate(IC_THIS_ERA, 'YYYYMMDD') FROM IC)
FROM NI
WHERE  NI_STOCK = 'SUP6128'
AND NI_TRAN_TYPE = 3
AND NI_STATUS IN (3,4)
AND NI_DATE >= F_LAST_YEAR_ERA_DATE()
GROUP BY NI_STOCK;

DECLARE
  n_era_num NUMBER := 5;
  squery VARCHAR2(100);
  s_era_result VARCHAR2(50);
BEGIN
  squery := q'{'SELECT ' || 'IC_PERIOD_NAME'|| n_era_num || ' FROM IC'}';
  EXECUTE IMMEDIATE squery INTO s_era_result;
  DBMS.OUTPUT(' era result is ' || s_era_result;
END



 --,(SELECT EXTRACT(YEAR FROM ToDate(IC_THIS_ERA, 'YYYYMMDD') FROM IC)
FROM NI
WHERE  NI_STOCK = 'SUP6128'
AND NI_TRAN_TYPE = 3
AND NI_STATUS IN (3,4)
AND NI_ERA = (SELECT IC_THIS_ERA FROM IC) - 200
GROUP BY NI_STOCK,NI_ERA,NI_DATE;


--AND SubStr(NI_ERA,0,3) = IC_PERIOD_NAME
GROUP BY NI_STOCK;
AND SubStr(NI_ERA,0,3) = 'OCT'
AND NI_ERA >= NI_ERA - 12;




SELECT EXTRACT(YEAR FROM To_Date(IC_THIS_ERA, 'YYYYMMDD')) FROM IC


CREATE TABLE TMP_TBL_COUNTS
(
  TABLE_NAME VARCHAR2(40)
, COUNT NUMBER
);


alter table TMP_ADMIN add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ADMIN_DATA2 add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ADMIN_DATA_BREAKPRICES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ADMIN_DATA_CUST add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ADMIN_DATA_PICKSLIPS add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ADMIN_DATA_PICK_LINECOUNTS add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ALL_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ALL_FREIGHT add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_BATCH_PRICE_SL_STOCK add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_CTN_DESP_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_CTN_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_CTN_IN_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_CUSTOMER_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_CUST_REPORTING add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_DESTROY_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_EMAIL_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_FAX_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_FREIGHT add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_GROUP_CUST add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_GROUP_CUST2 add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_HANDLING_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_HAND_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_IM_LOG_DATA add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_LOCN_CNT_BY_CUST add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_LOG_CNTS add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_LOG_STATS add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_MAN_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_MISC_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_M_FREIGHT add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PACKING_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PAL_CTN_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PAL_DESP_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PAL_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PAL_IN_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PHONE_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_PICK_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_SD_FR_DATA add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_SEC_STOR_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_SHRINKWRAP_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_SLOW_STOR_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_STOCK_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_STOR_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_VERBAL_ORD_FEES add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))
alter table TMP_V_FREIGHT add (campaign varchar2(255),spare1 varchar2(255),spare2 varchar2(255),spare3 varchar3(255))


Describe TMP_ALL_FEES

alter table "PWIN175"."TMP_M_FREIGHT" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_M_FREIGHT" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_M_FREIGHT" rename column "SPARE3" to "XXFREIGHT"

alter table "PWIN175"."TMP_M_XX_FREIGHT" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_M_XX_FREIGHT" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_M_XX_FREIGHT" rename column "SPARE3" to "XXFREIGHT"

alter table "PWIN175"."TMP_V_FREIGHT" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_V_FREIGHT" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_V_FREIGHT" rename column "SPARE3" to "XXFREIGHT"

alter table "PWIN175"."TMP_FREIGHT" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_FREIGHT" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_FREIGHT" rename column "SPARE3" to "XXFREIGHT"


alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "SPARE3" to "XXFREIGHT"

alter table "PWIN175"."TMP_ALL_FEES" rename column "PAYMENTTYPE" to "AddDate"
alter table "PWIN175"."TMP_ALL_FEES" rename column "CAMPAIGN" to "AddOp"
alter table "PWIN175"."TMP_ALL_FEES" rename column "SPARE3" to "XXFREIGHT"

--TESTING VIA 2 NEW TEMP TABLES
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "PICKNUM" to "DESPNOTE"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "DESPATCHNOTE" to "DESPDATE"

alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "PICKNUM" to "DESPNOTE"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "DESPATCHNOTE" to  to "DESPDATE"

alter table "PWIN175"."TMP_ALL_FEES_F" rename column "PICKNUM" to "DESPNOTE"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "DESPATCHNOTE" to "DESPDATE"

alter table "PWIN175"."TMP_ALL_FEES" rename column "PICKNUM" to "DESPNOTE"
alter table "PWIN175"."TMP_ALL_FEES" rename column "DESPATCHNOTE" to "DESPDATE"


alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "SELL_INCL" to "REPORTINGPRICE1"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "REPORTINGPRICE" to "COST1"

alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "SELL_INCL1" to "SELL_INCL"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "REPORTINGPRICE1" to "REPORTINGPRICE"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "COST1" to "COSTPRICE"



alter table "PWIN175"."TMP_ALL_FEES_F" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "SELL_EXCL_TOTAL" to "SELL_INCL1"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "SELL_INCL" to "REPORTINGPRICE1"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "REPORTINGPRICE" to "COST1"

alter table "PWIN175"."TMP_ALL_FEES_F" rename column "SELL_INCL1" to "SELL_INCL"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "REPORTINGPRICE1" to "REPORTINGPRICE"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "COST1" to "COSTPRICE"
Describe TMP_ALL_FEES_F
Describe TMP_ALL_FREIGHT_F

var cust varchar2(20)
exec :cust := 'IAG'
var nx NUMBER
EXEC :nx := 1810105
var cust2 varchar2(20)
exec :cust2 := 'TABCORP'

var ordernum varchar2(20)
exec :ordernum := '1363806'
var stock varchar2(20)
exec :stock := 'COURIER'
var source varchar2(20)
exec :source := '44'
var sAnalysis varchar2(20) /*VerbalOrderEntryFee*/
exec SELECT  RM_ANAL INTO :sAnalysis FROM RM where RM_CUST = :cust;
var anal varchar2(20)
exec :sAnalysis := '72'
var start_date varchar2(20)
exec :startdate := To_Date('1-Aug-2015')
var end_date varchar2(20)
exec :enddate := To_Date('31-Aug-2015')

	 select    s.SH_CUST                AS "Customer",
			  r.sGroupCust              AS "Parent",
			  s.SH_SPARE_STR_4         AS "CostCentre",
			  s.SH_ORDER               AS "Order",
			  s.SH_SPARE_STR_5         AS "OrderwareNum",
			  s.SH_CUST_REF            AS "CustomerRef",
			  t.ST_PICK                AS "PickNum",
			  t.ST_PSLIP               AS "DespNote",
			  substr(To_Char(t.ST_DESP_DATE),0,10)            AS "DespatchDate",
        substr(To_Char(s.SH_ADD_DATE),0,10) AS "OrderDate",
	      CASE  WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 0.1 THEN 'Freight Fee'
			          ELSE 'UnPricedAutoFreight'
			          END                      AS "FeeType",
			  d.SD_STOCK               AS "Item",
			  --'="' || To_Char(d.SD_DESC) || '"'               AS "Description",
	      REPLACE(d.SD_DESC,',','|')              AS "Description",
	      CASE  WHEN d.SD_LINE IS NOT NULL THEN  1
			        ELSE NULL
			        END                     AS "Qty",
	      CASE  WHEN d.SD_LINE IS NOT NULL THEN  '1'
			        ELSE NULL
			        END                      AS "UOI",

        f_calc_freight_fee(d.SD_SELL_PRICE,TRIM(d.SD_NOTE_1),'IAG',d.SD_ORDER) AS "UnitPriceMarkedUp",
        CASE  WHEN d.SD_SELL_PRICE >= 1 THEN f_calc_freight_fee(d.SD_SELL_PRICE,TRIM(d.SD_NOTE_1),'IAG',d.SD_ORDER)
			  ELSE d.SD_SELL_PRICE
        END AS "OWUnitPrice",
        CASE  WHEN d.SD_SELL_PRICE >= 1 THEN f_calc_freight_fee(d.SD_SELL_PRICE,TRIM(d.SD_NOTE_1),'IAG',d.SD_ORDER)
			  ELSE d.SD_EXCL
        END AS "DExcl",
			  CASE  WHEN d.SD_SELL_PRICE >= 1 THEN f_calc_freight_fee(d.SD_SELL_PRICE,TRIM(d.SD_NOTE_1),'IAG',d.SD_ORDER) * 1.1
			  ELSE d.SD_INCL
        END AS "DIncl",
        d.SD_XX_FREIGHT_CHG                   AS "XXPrice",
        CASE  WHEN d.SD_NOTE_1 = '' THEN to_CHAR(TO_NUMBER(d.SD_NOTE_1,'fm999999.99999999','nls_numeric_characters = ''.,'''))
			  ELSE '999'
        END AS "ReportingPrice",

			  d.SD_COST_PRICE           AS "COSTPRICE",
			  REPLACE(s.SH_ADDRESS, ',')             AS "Address",
			  REPLACE(s.SH_SUBURB, ',')              AS "Address2",
			  REPLACE(s.SH_CITY, ',')                AS "Suburb",
			  s.SH_STATE               AS "State",
			  s.SH_POST_CODE           AS "Postcode",
			  REPLACE(s.SH_NOTE_1, ',')              AS "DeliverTo",
			  REPLACE(s.SH_NOTE_2, ',')              AS "AttentionTo" ,
			  t.ST_WEIGHT              AS "Weight",
			  t.ST_PACKAGES            AS "Packages",
			  s.SH_SPARE_DBL_9         AS "OrderSource",
			  NULL AS "Pallet/Shelf Space", /*Pallet/Space*/
				NULL AS "Locn", /*Locn*/
				--0 AS "AvailSOH",/*Avail SOH*/
				0, --to_number(d.SD_SELL_PRICE) AS "CountOfStocks",
        CASE  WHEN regexp_substr(s.SH_SPARE_STR_3,'[a-z]+', 1, 2) IS NOT NULL THEN  s.SH_SPARE_STR_3 || '@' || s.SH_SPARE_STR_1
			        ELSE ''
			        END AS Email,
              'N/A' AS Brand,
        d.SD_ADD_DATE,d.SD_ADD_OP,
        s.SH_XX_FEE_WAIVE,d.SD_COST_PRICE,
        s.SH_SPARE_INT_4,s.SH_CAMPAIGN,
        d.SD_NOTE_1,d.SD_COST_PRICE,
        d.SD_XX_FREIGHT_CHG
	FROM      PWIN175.SD d
			  INNER JOIN PWIN175.SH s  ON s.SH_ORDER  = d.SD_ORDER
			  INNER JOIN PWIN175.ST t  ON LTRIM(RTRIM(t.ST_PICK))  = LTRIM(RTRIM(d.SD_XX_PICKLIST_NUM))
			  LEFT JOIN Tmp_Group_Cust r ON r.sCust = s.SH_CUST
        --INNER JOIN PWIN175.SD d2 ON d.SD_ORDER  = d2.SD_ORDER
	WHERE   (r.sGroupCust = 'IAG' OR r.sCust = 'IAG')
	AND       d.SD_STOCK IN ('COURIERM','COURIERS','COURIER')
  AND       t.ST_PSLIP != 'CANCELLED'
  AND       d.SD_ADD_DATE >= '10-Aug-2015' AND d.SD_ADD_DATE <= '10-Aug-2015'
  AND   d.SD_ADD_OP = 'SERV2'

	GROUP BY  s.SH_CUST,
			  s.SH_SPARE_STR_4,
			  s.SH_ORDER,
			  t.ST_PICK,
			  d.SD_XX_PICKLIST_NUM,d.SD_XX_FREIGHT_CHG,
			  t.ST_PSLIP,
			  t.ST_DESP_DATE,d.SD_ORDER,
			  d.SD_STOCK,
        s.SH_XX_FEE_WAIVE,d.SD_COST_PRICE,
        s.SH_SPARE_INT_4,s.SH_CAMPAIGN,
        d.SD_NOTE_1,d.SD_COST_PRICE,
        d.SD_XX_FREIGHT_CHG,d.SD_ADD_DATE,d.SD_ADD_OP,
			  d.SD_DESC,
			  d.SD_LINE,
			  d.SD_EXCL,
			  d.SD_INCL,
			  d.SD_NOTE_1,
			  d.SD_SELL_PRICE,
			  d.SD_XX_OW_UNIT_PRICE,
			  d.SD_QTY_ORDER,s.SH_CAMPAIGN,
			  d.SD_QTY_ORDER,
			  s.SH_ADDRESS,
			  s.SH_SUBURB,
			  s.SH_CITY,
			  s.SH_STATE,
			  s.SH_POST_CODE,
			  s.SH_NOTE_1,
			  s.SH_NOTE_2,
			  t.ST_WEIGHT,
			  t.ST_PACKAGES,
			  s.SH_SPARE_DBL_9,
			  r.sGroupCust,
			  s.SH_SPARE_STR_5,s.SH_ADD_DATE,
			  s.SH_CUST_REF,
        s.SH_SPARE_STR_3,
        s.SH_SPARE_STR_1,
        t.ST_SPARE_DBL_1,
        d.SD_XX_PSLIP_NUM,
          d.SD_ADD_DATE,
          d.SD_XX_PICKLIST_NUM,
          d.SD_COST_PRICE,s.SH_CAMPAIGN;


INSERT into tbl_AdminData( --Select * From Tmp_Cust_Reporting )
				  Customer,
				  Parent,
				  CostCentre,
				  OrderNum,
				  OrderwareNum,
				  CustRef,
				  Pickslip,
				  PickNum,
				  DespatchNote,
				  DespatchDate,
				  FeeType,
				  Item,
				  Description,
				  Qty,
				  UOI,
				  UnitPrice,
				  OW_Unit_Sell_Price,
				  Sell_Excl,
				  Sell_Excl_Total,
				  Sell_Incl,
				  Sell_Incl_Total,
				  ReportingPrice,
				  Address,
				  Address2,
				  Suburb,
				  State,
				  Postcode,
				  DeliverTo,
				  AttentionTo,
				  Weight,
				  Packages,
				  OrderSource,
				  ILNOTE2,
				  NILOCN,
				  NIAVAILACTUAL,
				  CountOfStocks,
          Email,
          Brand,
          OwnedBy,
          sProfile,
          WaiveFee,
          Cost,
          PaymentType      )


				  )





 SELECT Count(*) FROM TMP_M_FREIGHT  --275         SELECT DISTINCT Count(*) FROM TMP_M_FREIGHT  --275

 SELECT Count(PICKNUM) FROM TMP_M_FREIGHT  --275         SELECT DISTINCT Count(PICKNUM) FROM TMP_M_FREIGHT  --275


 SELECT Count(*) FROM TMP_M_FREIGHT t1 LEFT OUTER JOIN TMP_M_FREIGHT t2 ON t1.PICKNUM != t2.PICKNUM

  SELECT Count(*) FROM TMP_M_FREIGHT t1   WHERE    t1.DESPATCHNOTE NOT EXISTS (   SELECT PICKNUM FROM TMP_M_FREIGHT  )

  SELECT DISTINCT Count(*) FROM TMP_ALL_FEES

  SELECT  DISTINCT Count(PICKNUM) FROM TMP_ALL_FREIGHT  ORDER BY PICKNUM

  SELECT * FROM TMP_M_FREIGHT t1   WHERE ROWID NOT IN ( SELECT Max(ROWID) FROM TMP_M_FREIGHT t2 WHERE t1.picknum = t2.picknum)


  SELECT DISTINCT Count(*) FROM TMP_ALL_FEES ;
  SELECT  Count(*) FROM TMP_ALL_FEES;

  SELECT DISTINCT * FROM TMP_ALL_FEES         ;

  SELECT  * FROM TMP_ALL_FEES                   ;


  Select * From TMP_FREIGHT
          UNION ALL
          Select * From TMP_M_FREIGHT
          UNION ALL
          Select * From TMP_M_XX_FREIGHT
          UNION ALL
          Select * From TMP_V_FREIGHT;


SELECT II_STOCK,II_CUST,II_BREAK_LCL
							FROM II INNER JOIN IM ON IM_STOCK = II_STOCK
							AND II_BREAK_LCL > 0.000001
SELECT LTrim(ST_PICK),LTrim(ST_PSLIP), substr(To_Char(ST_DESP_DATE),0,10), ST_WEIGHT, ST_PACKAGES,ST_XX_NUM_PAL_SW,ST_XX_NUM_PALLETS,ST_XX_NUM_CARTONS
							FROM ST LEFT JOIN SH ON SH_ORDER = ST_ORDER
							WHERE ST_DESP_DATE >= '1-Jun-2015' AND ST_DESP_DATE <= '30-Jun-2015'	AND ST_PSLIP != 'CANCELLED'
							AND SH_STATUS <> 3

SELECT MAX(SL_LINE),LTrim(SL_PICK), LTrim(SL_ORDER), LTrim(SL_PSLIP),TP.vDateDesp, TP.vPackages,TP.vWeight,TP.vST_XX_NUM_PAL_SW,TP.vST_XX_NUM_PALLETS,TP.vST_XX_NUM_CARTONS
							FROM Tmp_Admin_Data_Pickslips TP RIGHT JOIN SL ON LTrim(SL_PICK) = TP.vPickslip WHERE SL_EDIT_DATE >= '1-Jun-2015' AND SL_EDIT_DATE <= '30-Jun-2015'
							GROUP BY SL_PICK,SL_ORDER,SL_PSLIP,TP.vDateDesp,TP.vPackages,TP.vWeight,TP.vST_XX_NUM_PAL_SW,TP.vST_XX_NUM_PALLETS,TP.vST_XX_NUM_CARTONS

SELECT nz.NI_STOCK, LTrim(RTrim(nz.NI_SL_PSLIP)), CAST((NX_SELL_VALUE/NX_QUANTITY) AS DECIMAL(22,2)) AS "UnitPrice", CAST(xz.NX_SELL_VALUE AS DECIMAL(22,2)), xz.NX_QUANTITY
						FROM  NX xz INNER JOIN NI nz ON nz.NI_NX_MOVEMENT = xz.NX_MOVEMENT
						INNER JOIN NE ez ON ez.NE_ENTRY = nz.NI_ENTRY AND ez.NE_PRICE_ENTRY = xz.NX_ENTRY
						WHERE ez.NE_NV_EXT_TYPE = 1810105
						AND ez.NE_STRENGTH = 3
						AND xz.NX_SELL_VALUE > 0 AND xz.NX_SELL_VALUE IS NOT NULL
						AND xz.NX_QUANTITY > 1
						AND ez.NE_ADD_DATE >= '1-Jun-2015' AND ez.NE_ADD_DATE <= '30-Jun-2015'
						GROUP BY nz.NI_STOCK, nz.NI_SL_PSLIP, xz.NX_SELL_VALUE, xz.NX_QUANTITY

SELECT LAST_DAY( sysdate ) FROM dual;


SELECT To_Date(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYYMMDD')  from dual;


SELECT LAST_DAY(ADD_MONTHS(sysdate,-2)) from dual;

select  to_char(to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD'),'YYYY-MM-DD'),'YYYY-MM-DD') AS "todate",
        CAST((to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'YYYY-MM-DD'),'YYYY-MM-DD') + 1) AS VARCHAR(10)) AS "Fromdate"  from dual;

select  to_char(to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD'),'YYYY-MM-DD'),'YYYY-MM-DD') AS "todate",
        to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'YYYY-MM-DD'),'YYYY-MM-DD') + 1 AS "Fromdate"  from dual;



 CAST((NX_SELL_VALUE/NX_QUANTITY) AS DECIMAL(22,2))
select to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY'),'DD-MM-YYYY'),to_date(to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY'),'DD-MM-YYYY') + 1   from dual;

SELECT to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)) + 1,'YYYY-MM-DD') AS "START DATE", to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'YYYY-MM-DD') AS "END DATE" from dual;

select to_char(LAST_DAY(ADD_MONTHS(sysdate,-1)),'DD-MM-YYYY')  from dual;

select to_char(LAST_DAY(ADD_MONTHS(sysdate,-2)),'DD-MM-YYYY')   from dual;



SELECT  Max(LAST_DAY(ADD_MONTHS(SYSDATE, -2)) + level)
FROM    dual
CONNECT BY
    level <= LAST_DAY(ADD_MONTHS(SYSDATE, -1)) - LAST_DAY(ADD_MONTHS(SYSDATE, -2))


SELECT CAST(SYSDATE) AS VARCHAR(10), TO_CHAR(sysdate, 'YYYY-MM-DD') FROM dual


SELECT to_char(sysdate,'YYYYMMDD') FROM dual;


SELECT to_char(sysdate,'YYYY-MM-DD') FROM dual;


select to_char(trunc(trunc(sysdate, 'MM') - 1, 'MM'),'DD-MM-YYYY') "First Day of Last Month",
to_char(trunc(sysdate, 'MM') - 1,'DD-MM-YYYY') "Last Day of Last Month"
from dual



SELECT * FROM Tmp_Admin_Data_Pick_LineCounts






 select    s.SH_CUST                AS "Customer",
			  r.sGroupCust              AS "Parent",
			  s.SH_SPARE_STR_4         AS "CostCentre",
			  s.SH_ORDER               AS "Order",
			  s.SH_SPARE_STR_5         AS "OrderwareNum",
			  s.SH_CUST_REF            AS "CustomerRef",
			  t.ST_PICK                AS "Pickslip",
			  d.SD_XX_PICKLIST_NUM     AS "PickNum",
			  t.ST_PSLIP               AS "DespatchNote",
			  substr(To_Char(t.ST_DESP_DATE),0,10)            AS "DespatchDate",
	      CASE  WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 0.1 THEN 'Freight Fee'
			          ELSE To_Char(d.SD_DESC)
			          END                      AS "FeeType",
			  d.SD_STOCK               AS "Item",
			  '="' || To_Char(d.SD_DESC) || '"'               AS "Description",
	      CASE  WHEN d.SD_LINE IS NOT NULL THEN  1
			        ELSE NULL
			        END                     AS "Qty",
	      CASE  WHEN d.SD_LINE IS NOT NULL THEN  '1'
			        ELSE NULL
			        END                      AS "UOI",

        CASE  WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 1 AND (r.sGroupCust <> 'BORBUI' AND r.sGroupCust <> 'BEYONDBLUE') THEN d.SD_SELL_PRICE
			        WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 1 AND (r.sGroupCust = 'BORBUI' OR r.sGroupCust = 'BEYONDBLUE') AND (t.ST_SPARE_DBL_1 <= 0.125) And (t.ST_SPARE_DBL_1 > 0.00) THEN 1.70
              WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 1 AND (r.sGroupCust = 'BORBUI' OR r.sGroupCust = 'BEYONDBLUE') AND (t.ST_SPARE_DBL_1 <= 0.250) And (t.ST_SPARE_DBL_1 > 0.126) THEN 2.30
              WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 1 AND (r.sGroupCust = 'BORBUI' OR r.sGroupCust = 'BEYONDBLUE') AND (t.ST_SPARE_DBL_1 <= 0.500) And (t.ST_SPARE_DBL_1 > 0.251) THEN 3.40
              WHEN d.SD_STOCK like 'COURIER%' AND d.SD_SELL_PRICE >= 1 AND (r.sGroupCust = 'BORBUI' OR r.sGroupCust = 'BEYONDBLUE') AND (t.ST_WEIGHT > 0.01) THEN d.SD_SELL_PRICE
              ELSE NULL
			        END                      AS "UnitPrice",
			  d.SD_XX_OW_UNIT_PRICE    AS "OWUnitPrice",
			  d.SD_EXCL                AS "DExcl",
			  Sum(d.SD_EXCL)           AS "Excl_Total",
			  d.SD_INCL                AS "DIncl",
			  Sum(d.SD_INCL)           AS "Incl_Total",
			  NULL                     AS "ReportingPrice",
			  s.SH_ADDRESS             AS "Address",
			  s.SH_SUBURB              AS "Address2",
			  s.SH_CITY                AS "Suburb",
			  s.SH_STATE               AS "State",
			  s.SH_POST_CODE           AS "Postcode",
			  s.SH_NOTE_1              AS "DeliverTo",
			  s.SH_NOTE_2              AS "AttentionTo" ,
			  t.ST_WEIGHT              AS "Weight",
			  t.ST_PACKAGES            AS "Packages",
			  s.SH_SPARE_DBL_9         AS "OrderSource",
			  NULL AS "Pallet/Shelf Space", /*Pallet/Space*/
				NULL AS "Locn", /*Locn*/
			--	0 AS "AvailSOH",/*Avail SOH*/
				0 AS "CountOfStocks",
        CASE  WHEN regexp_substr(s.SH_SPARE_STR_3,'[a-z]+', 1, 2) IS NOT NULL THEN  s.SH_SPARE_STR_3 || '@' || s.SH_SPARE_STR_1
			        ELSE ''
			        END AS Email,
              'N/A' AS Brand,
           NULL AS    OwnedBy,
           NULL AS    sProfile,
           NULL AS    WaiveFee,
           d.SD_COST_PRICE As   Cost,
           NULL AS PaymentType
	FROM      PWIN175.SD d
			  INNER JOIN PWIN175.SH s  ON s.SH_ORDER  = d.SD_ORDER
			  INNER JOIN PWIN175.ST t  ON LTRIM(RTRIM(t.ST_PICK))  = LTRIM(RTRIM(d.SD_XX_PICKLIST_NUM))
			  LEFT JOIN Tmp_Group_Cust r ON r.sCust = s.SH_CUST
	WHERE     s.SH_ORDER = d.SD_ORDER
	--AND       r.RM_ANAL = :sAnalysis
	AND       (r.sGroupCust = 'IAG' OR r.sCust = 'IAG')
	AND       d.SD_STOCK IN ('COURIERM','COURIERS','COURIER')
	AND       s.SH_ORDER = t.ST_ORDER
	AND       d.SD_SELL_PRICE >= 0.1
	--AND       t.ST_DESP_DATE >= start_date
  AND       t.ST_DESP_DATE >= F_FIRST_DAY_PREV_MONTH AND t.ST_DESP_DATE <= F_LAST_DAY_PREV_MONTH
  AND   d.SD_ADD_OP LIKE 'SERV%'

 /* 	WHERE     r.sGroupCust = :sCust OR r.sCust = :sCust
	AND       d.SD_STOCK LIKE :sCourier -- (:courier1,:courier2,:courier3)
	AND       s.SH_ORDER = t.ST_ORDER
	AND       d.SD_SELL_PRICE >= 0.1
	AND       t.ST_DESP_DATE >= start_date AND t.ST_DESP_DATE <= end_date
  AND   d.SD_ADD_OP LIKE :sServ3;
  USING sCust,sCust,sCourier,start_date,end_date,sServ3;

 -- OPEN c(sCust,

  --AND s.SH_ORDER LIKE '   1377018'*/

	GROUP BY  s.SH_CUST,
			  s.SH_SPARE_STR_4,
			  s.SH_ORDER,
			  t.ST_PICK,
			  d.SD_XX_PICKLIST_NUM,
			  t.ST_PSLIP,
			  t.ST_DESP_DATE,
			  d.SD_STOCK,
			  d.SD_DESC,
			  d.SD_LINE,
			  d.SD_EXCL,
			  d.SD_INCL,
			  d.SD_NOTE_1,
			  d.SD_SELL_PRICE,
			  d.SD_XX_OW_UNIT_PRICE,
			  d.SD_QTY_ORDER,
			  d.SD_QTY_ORDER,
			  s.SH_ADDRESS,
			  s.SH_SUBURB,
			  s.SH_CITY,
			  s.SH_STATE,
			  s.SH_POST_CODE,
			  s.SH_NOTE_1,
			  s.SH_NOTE_2,
			  t.ST_WEIGHT,
			  t.ST_PACKAGES,
			  s.SH_SPARE_DBL_9,
			  r.sGroupCust,
			  s.SH_SPARE_STR_5,
			  s.SH_CUST_REF,
        s.SH_SPARE_STR_3,
        s.SH_SPARE_STR_1,
        t.ST_SPARE_DBL_1,
        d.SD_XX_PSLIP_NUM,
          d.SD_ADD_DATE,
          d.SD_XX_PICKLIST_NUM,
          d.SD_COST_PRICE;


SELECT ST_DESP_DATE, ST_PICK FROM ST
GROUP BY ST_DESP_DATE,ST_PICK
HAVING TO_CHAR(ST_DESP_DATE) >= PWIN175.F_FIRST_DAY_PREV_MONTH AND TO_CHAR(ST_DESP_DATE) <= PWIN175.F_LAST_DAY_PREV_MONTH

SELECT PWIN175.F_FIRST_DAY_PREV_MONTH,PWIN175.F_LAST_DAY_PREV_MONTH,ST_DESP_DATE, ST_PICK FROM ST
WHERE TO_CHAR(t.ST_DESP_DATE,'YYYY-MM-DD') >= PWIN175.F_FIRST_DAY_PREV_MONTH AND TO_CHAR(ST_DESP_DATE,'YYYY-MM-DD') <= PWIN175.F_LAST_DAY_PREV_MONTH


SELECT * FROM YN WHERE YN_DESC = 9095703


Select * from TMP_ORD_FEES;

SELECT * FROM Tmp_Group_Cust;


SELECT Count(DISTINCT NI_STOCK) AS CountOfStocks, IL_LOCN, IM_CUST, IM_STOCK, IM_XX_ABSTRACT2, IM_DESC, NI_AVAIL_ACTUAL,
                      (Select NI_DATE From n1 NI Where n1.NI_TRAN_TYPE = 1 AND n1.NI_STOCK = 'N000028119' Order By n1.NI_DATE Desc ) As Last Receipt,
                      (Select NI_DATE From n2 NI Where n2.NI_TRAN_TYPE = 3 AND n2.NI_STOCK = 'N000028119' Order By n2.NI_DATE Desc limit(1)) As Last Used Date
						        FROM IL INNER JOIN n NI  ON IL_LOCN = n.NI_LOCN
						        INNER JOIN IM ON IM_STOCK = n.NI_STOCK
						        WHERE IM_CUST LIKE '%D-%'
                    --OR IM_CUST LIKE :cust
						        AND IM_ACTIVE = 1
						        AND n.NI_AVAIL_ACTUAL >= '1'
						        AND n.NI_STATUS <> 0
						        GROUP BY IL_LOCN, IM_CUST
                    ORDER BY 3,2,1







INSERT INTO Tmp_Admin_Data_Pickslips
SELECT LTrim(ST_PICK),LTrim(ST_PSLIP), substr(To_Char(ST_DESP_DATE),0,10), ST_WEIGHT, ST_PACKAGES,ST_XX_NUM_PAL_SW,ST_XX_NUM_PALLETS,ST_XX_NUM_CARTONS
FROM ST LEFT JOIN SH ON SH_ORDER = ST_ORDER
WHERE TO_CHAR(ST_DESP_DATE,'YYYY-MM-DD') >= F_FIRST_DAY_PREV_MONTH AND TO_CHAR(ST_DESP_DATE,'YYYY-MM-DD') <= F_LAST_DAY_PREV_MONTH	AND ST_PSLIP != 'CANCELLED'
AND SH_STATUS <> 3;

Select * From Tmp_Admin_Data_Pickslips;
SELECT * FROM Tmp_Admin_Data_Pick_LineCounts;
SELECT * FROM Tmp_Locn_Cnt_By_Cust;
SELECT * FROM TMP_FREIGHT;
SELECT Count(*) FROM TMP_FREIGHT;
Select * from TMP_ORD_FEES;
Select Count(*) From TMP_ORD_FEES;
SELECT * FROM Tmp_Group_Cust;
Truncate table Tmp_Group_Cust;
SELECT Count(*) FROM Tmp_Group_Cust;



create or replace PROCEDURE DM_CUSTOMER_STORAGE_COUNTS
        (
        cust      IN VARCHAR2
        ,gds_src_get_locn_stocks OUT sys_refcursor
        )
     AS
    v_out_tx          VARCHAR2(2000);
    v_query           CLOB;
    nCheckpoint       NUMBER;


    BEGIN


  /*decalre variables*/
     /*  create table if required

     CREATE TABLE Tmp_dm_stats (vCntOfStocks NUMBER, vLocn VARCHAR(20), vCust VARCHAR(20));

     */

    /* Truncate all temp tables*/
        nCheckpoint := 1;
        v_query := 'TRUNCATE TABLE Tmp_dm_stats';
        EXECUTE IMMEDIATE v_query;

    /* Run Group Cust Procedure*/
		--//nCheckpoint := 10;
		--//EXECUTE IMMEDIATE 'BEGIN eom_report_pkg.GROUP_CUST_START; END;';

		--DBMS_OUTPUT.PUT_LINE('Successfully truncated, recreated AND populated Tmp_Group_Cust');
     COMMIT;

    /*Insert fresh temp data*/
        nCheckpoint := 2;



        v_query := q'{  SELECT Count(DISTINCT NI_STOCK) AS CountOfStocks, IL_LOCN, IM_CUST, IM_STOCK, IM_XX_ABSTRACT2, IM_DESC, NI_AVAIL_ACTUAL,
                      F_DM_LAST_REC_DATE(IM_STOCK),
                      F_DM_LAST_USE_DATE(IM_STOCK)
						        FROM IL INNER JOIN NI  ON IL_LOCN = NI_LOCN
						        INNER JOIN IM ON IM_STOCK = NI_STOCK
						        WHERE IM_CUST LIKE '%D-%'
                    OR IM_CUST LIKE :cust
						        AND IM_ACTIVE = 1
						        AND NI_AVAIL_ACTUAL >= '1'
						        AND NI_STATUS <> 0
						        GROUP BY IL_LOCN, IM_CUST, IM_STOCK, IM_XX_ABSTRACT2, IM_DESC, NI_AVAIL_ACTUAL
                    ORDER BY 3



                      }';
           OPEN gds_src_get_locn_stocks FOR  v_query
          -- USING start_date, end_date, warehouse, start_date, end_date, warehouse, start_date, end_date, warehouse, start_date, end_date, warehouse;
           USING cust;
           DBMS_OUTPUT.PUT_LINE('Successfully inserted new temporary data for dm customer storage counts');

  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('EOM processing failed at dm customer storage counts ' || nCheckpoint ||
                          ' with error ' || SQLCODE || ' : ' || SQLERRM);
      RAISE;
  END DM_CUSTOMER_STORAGE_COUNTS;


--Syncing Temp Table Columns

alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "AddDate" to "ADDDATE"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "AddOp" to "ADDOP"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "AddDate" to "ADDDATE"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "AddOp" to "ADDOP"

alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "AddDate" to "ADDDATE"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "AddOp" to "ADDOP"

alter table "PWIN175"."TMP_ALL_FEES" rename column "AddDate" to "ADDDATE"
alter table "PWIN175"."TMP_ALL_FEES" rename column "AddOp" to "ADDOP"


alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "IFSSELL" to "AddDate"
alter table "PWIN175"."TMP_ALL_FREIGHT_F" rename column "IFSCOST" to "AddOp"

alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "UNITPRICE" to "UNITPRICEMARKEDUP"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "OWUNITPRICE" to "SDSELL"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "REPORTINGPRICE" to "SDXXFREIGHTCHG"
alter table "PWIN175"."TMP_ALL_FREIGHT" rename column "PREMARKUPSELL" to "SDNOTE1"


alter table "PWIN175"."TMP_ALL_FREIGHT_ALL" rename column "UNITPRICE" to "UNITPRICEMARKEDUP"
alter table "PWIN175"."TMP_ALL_FREIGHT_ALL" rename column "OWUNITPRICE" to "SDSELL"
alter table "PWIN175"."TMP_ALL_FREIGHT_ALL" rename column "REPORTINGPRICE" to "SDXXFREIGHTCHG"
alter table "PWIN175"."TMP_ALL_FREIGHT_ALL" rename column "PREMARKUPSELL" to "SDNOTE1"


alter table "PWIN175"."TMP_ALL_FEES" rename column "IFSSELL" to "AddDate"
alter table "PWIN175"."TMP_ALL_FEES" rename column "IFSCOST" to "AddOp"

alter table "PWIN175"."TMP_ALL_FEES_F" rename column "IFSSELL" to "AddDate"
alter table "PWIN175"."TMP_ALL_FEES_F" rename column "IFSCOST" to "AddOp"

*****
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "PICKNUM" to "DESPNOTE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "DESPATCHNOTE" to "DESPDATE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "DESPATCHDATE" to "ORDERDATE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_HANDLING_FEES" rename column "SPARE2" to "ADDOP"


alter table  "PWIN175"."TMP_PICK_FEES" rename column "PICKNUM" to "DESPNOTE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "DESPATCHNOTE" to "DESPDATE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "DESPATCHDATE" to "ORDERDATE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_PICK_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "PICKNUM" to "DESPNOTE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "DESPATCHNOTE" to "DESPDATE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "DESPATCHDATE" to "ORDERDATE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_ALL_ORD_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_CTN_DESP_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_CTN_IN_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_CUSTOMER_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_DESTROY_ORD_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_MISC_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_MISC_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_PACKING_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_PACKING_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_PAL_CTN_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_PAL_DESP_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_PAL_IN_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_STOCK_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_STOCK_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_STOR_ALL_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_STOR_FEES" rename column "OW_UNIT_SELL_PRICE" to "OWUNITPRICE"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "REPORTINGPRICE" to "COSTPRICE"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SELL_INCL" to "REPORTINGPRICE"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SPARE1" to "ADDDATE"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SPARE2" to "ADDOP"
alter table  "PWIN175"."TMP_STOR_FEES" rename column "SPARE3" to "XXFREIGHT"

alter table  "PWIN175"."TMP_V_FREIGHT" rename column "DESPATCHNOTE" to "DESPNOTE"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "SELL_EXCL" to "SELLEXCL"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "SELL_EXCL_TOTAL" to "SELLINCL"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "SELL_INCL_TOTAL" to "PREMARKUPSELL"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "AddOp" to "PAYMENTTYPE"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "AddDate" to "CAMPAIGN"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "IFSSELL" to "ADDDATE"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "IFSCOST" to "ADDOP"
alter table  "PWIN175"."TMP_V_FREIGHT" rename column "SPARE3" to "XXFREIGHT"

****

describe "TMP_PICK_FEES"



INSERT INTO TMP_CUST_REPORTING (
'ALL','CUSTOMER,
PARENT,
COSTCENTRE,
ORDERNUM,
PICKSLIP,
DESPNOTE,
DESPDATE,
ORDERDATE,
FEETYPE,
ITEM,
DESCRIPTION,
QTY,
UNITPRICE,
OWUNITPRICE,
SELLEXCL,
SELLINCL,
REPORTINGPRICE,
PREMARKUPSELL,
COSTPRICE,
COST,
PAYMENTTYPE,
CAMPAIGN,
ADDDATE,
ADDOP,
XXFREIGHT','','','','')




SELECT CUSTOMER,
PARENT,
COSTCENTRE,
ORDERNUM,
PICKSLIP,
DESPNOTE,
DESPDATE,
ORDERDATE,
FEETYPE,
ITEM,
DESCRIPTION,
QTY,
UNITPRICE,
OWUNITPRICE,
SELLEXCL,
SELLINCL,
REPORTINGPRICE,
PREMARKUPSELL,
COSTPRICE,
COST,
PAYMENTTYPE,
CAMPAIGN,
ADDDATE,
ADDOP,
XXFREIGHT FROM TMP_ALL_FREIGHT_F

SELECT * FROM TMP_ALL_FREIGHT_ALL WHERE CUSTOMER = 'IAG' OR PARENT = 'IAG';

  SELECT Count(*) FROM TMP_ALL_FREIGHT_ALL WHERE CUSTOMER = 'IAG' OR PARENT = 'IAG';
  SELECT * FROM TMP_STOR_ALL_FEES WHERE CUSTOMER = 'IAG' OR PARENT = 'IAG' OR CUSTOMER = 'CGU' OR PARENT = 'CGU' AND ITEM = '4515';

SELECT * FROM TMP_STOR_ALL_FEES WHERE CUSTOMER = 'CANON' OR PARENT = 'CANON';

SELECT (EXTRACT(MONTH FROM NI_DATE) || '/' || EXTRACT(YEAR FROM NI_DATE)) AS Month_Year
      --, AS salesyear
     , NI_STOCK     AS Stock
     , SUM(Abs(NI_QUANTITY)) AS Total_Issues
  FROM NI,IM
WHERE
NI_STOCK = IM_STOCK
AND IM_CUST = 'TABCORP'
AND IM_ACTIVE = 1
AND NI_TRAN_TYPE = 3
AND NI_STATUS = 4
AND NI_DATE >= SYSDATE -365
GROUP
    BY EXTRACT(MONTH FROM NI_DATE)
    ,EXTRACT(YEAR FROM NI_DATE)
     , NI_STOCK
ORDER
    BY EXTRACT(MONTH FROM NI_DATE)
    , EXTRACT(YEAR FROM NI_DATE)
     , Total_Issues DESC


SELECT Count(DISTINCT NI_STOCK) AS CountOfStocks, IL_LOCN, IM_CUST,
                        CASE
                          WHEN Upper(substr(IL_NOTE_2,0,1)) = 'Y' THEN (SELECT To_Number(regexp_substr(RM_XX_FEE11,'^[-]?[[:digit:]]*\.?[[:digit:]]*$'))  FROM RM WHERE RM_CUST = IM_CUST) * Count(DISTINCT NI_STOCK)
                          ELSE (SELECT To_Number(regexp_substr(RM_XX_FEE12,'^[-]?[[:digit:]]*\.?[[:digit:]]*$'))  FROM RM WHERE RM_CUST = IM_CUST)
                          END AS "Rate",
                        CASE
                          WHEN Upper(substr(IL_NOTE_2,0,1)) = 'Y' THEN (SELECT To_Number(regexp_substr(RM_XX_FEE11,'^[-]?[[:digit:]]*\.?[[:digit:]]*$'))  FROM RM WHERE RM_CUST = IM_CUST) * Count(DISTINCT NI_STOCK)
                          ELSE (SELECT To_Number(regexp_substr(RM_XX_FEE12,'^[-]?[[:digit:]]*\.?[[:digit:]]*$'))  FROM RM WHERE RM_CUST = IM_CUST)
                          END AS "Charge",
                        CASE
                          WHEN Upper(substr(IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
                          ELSE 'F- Shelves'
                          END AS "Charge_Desc"
                        ,NULL,NULL,NULL
						FROM IL INNER JOIN NI  ON IL_LOCN = NI_LOCN
						INNER JOIN IM ON IM_STOCK = NI_STOCK
						WHERE
            IM_CUST IN (SELECT RM_CUST FROM RM WHERE To_Number(regexp_substr(RM_XX_FEE11,'^[-]?[[:digit:]]*\.?[[:digit:]]*$')) > 0
            OR To_Number(regexp_substr(RM_XX_FEE11,'^[-]?[[:digit:]]*\.?[[:digit:]]*$')) > 0 AND RM_ACTIVE = 1 )
						AND
            IM_ACTIVE = 1
						AND NI_AVAIL_ACTUAL >= 1
						AND NI_STATUS <> 3
						GROUP BY IL_LOCN, IM_CUST,IL_NOTE_2;

SELECT NI_STOCK, EXTRACT(YEAR FROM NI_DATE) As YEARDATE,EXTRACT(MONTH FROM NI_DATE) AS MONTHDATE,ABS(NI_QUANTITY) AS QTY
FROM NI
WHERE NI_STOCK = 'SUP5031'
AND IM_ACTIVE = 1
AND NI_TRAN_TYPE = 3
AND NI_STATUS = 4
AND NI_DATE >= SYSDATE -365
MODEL
PARTITION BY (NI_STOCK)
DIMENSION BY (YEARDATE,MONTHDATE)
MEASURES ( NI_QUANTITY)
( NI_QUANTITY[2,2016] = NI_QUANTITY[1,2015]);

SELECT *
FROM (
  SELECT EXTRACT(MONTH FROM NI_DATE) AS MNTH,NI_STOCK,Abs(NI_QUANTITY) AS QTY
  FROM NI,IM
  WHERE NI_STOCK = IM_STOCK
  AND IM_ACTIVE = 1
  AND IM_CUST = 'TABCORP'
  AND NI_TRAN_TYPE = 3
  AND NI_STATUS = 4
  AND NI_DATE >= SYSDATE -365
  --AND EXTRACT(YEAR FROM NI_DATE) = '2015'
  --OR EXTRACT(YEAR FROM NI_DATE) = '2014'
)
PIVOT (
  Sum(QTY) FOR MNTH IN (1 AS JAN, 2 AS FEB, 3 AS MAR, 4 AS APR, 5 AS MAY
  ,6 AS JUN, 7 AS JULY, 8 AS AUG, 9 AS SEP, 10 AS OCT, 11 AS NOV, 12 AS DEC)
)
ORDER BY NI_STOCK;


SELECT *
FROM (
  SELECT EXTRACT(MONTH FROM n1.NI_DATE) AS MNTH,n1.NI_STOCK,Nvl(Abs(n1.NI_QUANTITY),0) AS QTY--, Sum(n1.NI_AVAIL_ACTUAL) AS AVAIL
  ,i.IM_DESC,i.IM_FINISH,i.IM_LEVEL_UNIT,i.IM_NEXT_ID,i.IM_PROFILE
 ,total_soh_by_stock(n1.NI_STOCK) AS AVAIL
 /*,(SELECT  total_soh_by_stock(i2.IM_STOCK)
    FROM IM i2
    WHERE i2.IM_STOCK = i.IM_STOCK
    GROUP BY i2.IM_STOCK )
    AS AVAIL     */

  FROM NI n1 INNER JOIN IM i ON i.IM_STOCK = n1.NI_STOCK
  WHERE i.IM_ACTIVE = 1
  AND i.IM_CUST = 'RTA'
  AND n1.NI_TRAN_TYPE = 3
  AND n1.NI_STATUS = 4
  AND n1.NI_DATE >= SYSDATE -365
  --AND EXTRACT(YEAR FROM NI_DATE) = '2015'
  --OR EXTRACT(YEAR FROM NI_DATE) = '2014'
)
--GROUP BY n1.NI_STOCK

PIVOT ( --Sum(AVAIL) AS AVAIL,
  Sum(QTY) AS TOTAL_ISS FOR MNTH IN (1 AS JAN, 2 AS FEB, 3 AS MAR, 4 AS APR, 5 AS MAY
  ,6 AS JUN, 7 AS JULY, 8 AS AUG, 9 AS SEP, 10 AS OCT, 11 AS NOV, 12 AS DEC)
)

ORDER BY NI_STOCK;

SELECT i.IM_STOCK, total_soh_by_stock(i.IM_STOCK) AS AVAIL
FROM IM i
WHERE i.IM_CUST = 'TABCORP'
GROUP BY i.IM_STOCK

describe IQ

SELECT IQ_STOCK,IQ_AVAIL
FROM IQ
WHERE IQ_STOCK =  'SUP5031'

select * from t1
pivot(max(org) as org, max(position) as position for lang in ('EN' as "EN",'FI' as "FI",'SV' as "SV"))

select clientname, nvl(MON,0) MON,  nvl(TUE,0) TUE, nvl(WED,0) WED, nvl(THU,0) THU, nvl(FRI,0) FRI, nvl(SAT,0) SAT, nvl(SUN,0) SUN,
nvl(MON,0) +  nvl(TUE,0) + nvl(WED,0) + nvl(THU,0) + nvl(FRI,0) +nvl(SAT,0) + nvl(SUN,0) TotalForWeek
from
(
select   clientname,to_char(tradedate,'Dy') dw, sum(quantity) quantity from ClientTrade
group by clientname,  to_char(tradedate,'Dy')
)
pivot (sum(quantity) FOR dw in ('Mon' as MON,'Tue' as TUE,'Wed' AS WED,'Thu' AS THU,'Fri' AS FRI,'Sat' AS SAT,'Sun' AS SUN) )

SELECT TO_CHAR(LAST_ANALYZED, 'DD-MON-YY') As LAST_DATA_REFRESH
FROM DBA_TABLES
WHERE TABLE_NAME = 'TMP_ADMIN_DATA_PICK_LINECOUNTS'
AND LAST_DATA_REFRESH = sysdate;


SELECT * FROM TMP_STOCK_FEES


SELECT Count(*) FROM SH WHERE TO_CHAR(SH_ADD_DATE, 'DD-MON-YY') = (SELECT TO_CHAR(SYSDATE - 5, 'DD-MON-YY') FROM dual);



 v_query := q'{INSERT INTO TMP_EOM_LOGS VALUES (SYSTIMESTAMP ,:startdate,:enddate,'F_EOM_TMP_ALL_FREIGHT_ALL','NONE','TMP_ALL_FREIGHT_ALL',:v_time_taken,SYSTIMESTAMP )  }';
 EXECUTE IMMEDIATE v_query USING startdate,enddate,v_time_taken;


 Select /*+INDEX(TMP_EOM_LOGS LAST_TOUCHED)*/ TO_DATE From TMP_EOM_LOGS Where ROWNUM <= 1 AND DEST_TBL = 'TMP_ALL_FREIGHT_ALL' ORDER BY LAST_TOUCH Desc
 Select TO_DATE From TMP_EOM_LOGS Where DEST_TBL = 'TMP_ALL_FREIGHT_ALL' ORDER BY LAST_TOUCH Desc HAVING ROWNUM <= 1
 Select IM_STOCK,IM_DESC From PWIn175.IM where ROWNUM <= 3 Order By IM_STOCK Asc

 --Select /*+INDEX(TMP_EOM_LOGS LAST_TOUCHED)*/ TO_DATE From TMP_EOM_LOGS Where ROWNUM <= 1 AND DEST_TBL = 'TMP_ALL_FREIGHT_ALL' Order By LAST_TOUCH Desc

 SELECT TO_DATE
  FROM (SELECT * FROM TMP_EOM_LOGS ORDER BY LAST_TOUCH DESC)
WHERE ROWNUM <= 1;


DECLARE
 v_query VARCHAR2(500);
 end_date  VARCHAR2(500) := '08-Sep-15';
 v_query_result VARCHAR2(500);
BEGIN
 --v_query  := q'{Select /*+INDEX(TMP_EOM_LOGS LAST_TOUCHED)*/ TO_DATE From TMP_EOM_LOGS Where DEST_TBL = 'TMP_ALL_FREIGHT_ALL' AND ROWNUM <= 1   }';
--  EXECUTE IMMEDIATE v_query INTO v_query_result;
   --v_query := q'{Select EOM_REPORT_PKG_TEST.EOM_CHECK_LOG(TO_CHAR(end_date,'DD-MON-YY') ,'TMP_ALL_FREIGHT_ALL','F_EOM_TMP_ALL_FREIGHT_ALL') }';--q'{INSERT INTO TMP_EOM_LOGS VALUES (SYSTIMESTAMP ,:startdate,:enddate,'F_EOM_TMP_ALL_FREIGHT_ALL','NONE','TMP_ALL_FREIGHT_ALL',:v_time_taken,SYSTIMESTAMP )  }';
  Select (EOM_REPORT_PKG_TEST.F_EOM_CHECK_LOG(ASCII(REPLACE(end_date,'2015','15')) ,'TMP_ALL_FREIGHT_ALL','F_EOM_TMP_ALL_FREIGHT_ALL')) INTO v_query_result From Dual;

   --EXECUTE IMMEDIATE EOM_REPORT_PKG_TEST.EOM_CHECK_LOG(TO_CHAR(end_date,'DD-MON-YY') ,'TMP_ALL_FREIGHT_ALL','F_EOM_TMP_ALL_FREIGHT_ALL') INTO v_query_result;
   If UPPER(v_query_result) != UPPER(end_date) Then
    DBMS_OUTPUT.PUT_LINE('Need to RUN_ONCE Freight for all customers as table is not empty but has a different end date data range being '|| v_query_result || ' and end date was ' || end_date );
   Else
    DBMS_OUTPUT.PUT_LINE('5th No Need to RUN_ONCE Freight for all customers as table is not empty with current data range, end date being ' || end_date || ' and the last date range from the query result was ' || v_query_result );
   End If;
   --DBMS_OUTPUT.PUT_LINE('5th No Need to RUN_ONCE Freight for all customers as table is not empty.' || end_date || ' query result was ' || v_query_result );AND ROWNUM = 1 AND LAST_TOUCH IS NOT NULL
END;

DECLARE
  v_query_result VARCHAR2(100);
  v_query_result2 VARCHAR2(100);
  v_tmp_date VARCHAR2(12) := TO_DATE('30-Sep-2015', 'DD-MON-YY');
  sCust_start VARCHAR2(200) := 'IAG';
BEGIN
  Select (EOM_REPORT_PKG_TEST.F_EOM_CHECK_LOG(v_tmp_date ,'TMP_STOR_ALL_FEES','H4_EOM_ALL_STOR_FEES')) INTO v_query_result From Dual;
  --v_query := q'{Select EOM_REPORT_PKG_TEST.EOM_CHECK_LOG(TO_CHAR(end_date,'DD-MON-YY') ,'TMP_ALL_FREIGHT_ALL','F_EOM_TMP_ALL_FREIGHT_ALL') }';--q'{INSERT INTO TMP_EOM_LOGS VALUES (SYSTIMESTAMP ,:startdate,:enddate,'F_EOM_TMP_ALL_FREIGHT_ALL','NONE','TMP_ALL_FREIGHT_ALL',:v_time_taken,SYSTIMESTAMP )  }';
  Select (EOM_REPORT_PKG_TEST.F_EOM_CHECK_CUST_LOG(sCust_start ,'TMP_STOR_FEES','H4_EOM_ALL_STORS')) INTO v_query_result2 From Dual;
  DBMS_OUTPUT.PUT_LINE(''
          || ' Last Cust match was ' ||  UPPER(v_query_result2)
          || ' and this cust was ' ||  UPPER(sCust_start)
          || ' and to date was ' ||  UPPER(v_query_result)
          || ' and this date was ' ||  UPPER(v_tmp_date)
          );
END;
/
DECLARE
  sCust VARCHAR2(100);
  sTable VARCHAR2(100);
  sRtnVal VARCHAR2(100);
BEGIN
select  *
from
TMP_EOM_LOGS
Where CUST = 'IAG'
OR DEST_TBL = 'TMP_STOR_FEES'
ORDER BY LAST_TOUCH Desc;
    --return sRtnVal;
END;
/

 /*
    "DATETIME" ,
    "FROM_DATE" ,
    "TO_DATE" ,
    "ORIGIN_PROCESS" ,
    "ORIGIN_TBL",
    "DEST_TBL" ,
    "TIME_TAKEN" ,
    "LAST_TOUCH" ,
    "CUST" */

    --into sRtnVal


    Select * From Tmp_Log_Cnts ORDER BY 1,2,3




Select DESPNOTE From TMP_ALL_FREIGHT_F
WHERE Trim(FEETYPE) = 'Freight Fee' AND rowid not in
(select max(rowid) from TMP_ALL_FREIGHT_F Trim WHERE (FEETYPE) = 'Freight Fee' group by DESPNOTE);

Select DESPNOTE From TMP_ALL_FREIGHT_F
WHERE Trim(FEETYPE) = 'Freight Fee' AND rowid in
(select max(rowid) from TMP_ALL_FREIGHT_F Trim WHERE (FEETYPE) = 'Freight Fee' group by DESPNOTE);

Select * From TMP_ALL_FREIGHT_F
    WHERE Trim(FEETYPE) != 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F Trim WHERE (FEETYPE) = 'Freight Fee' group by DESPNOTE)

Select * From TMP_ALL_FREIGHT_ALL
    WHERE Trim(FEETYPE) = 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_ALL WHERE Trim(FEETYPE) = 'Freight Fee' group by DESPNOTE)






  --WORKING
    Select  Count(*)
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE = 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE) ;  --1114

    Select  *
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE = 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE) ;

 --Get REST
    Select  Count(*)
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE != 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE) ;  --425

    Select  *
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE != 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE) ;


-- UNION
Select  *
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE = 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE)   --1114
 UNION ALL
Select  *
    From TMP_ALL_FREIGHT_F
    WHERE FEETYPE != 'Freight Fee' AND rowid in
    (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE) ;  --425


 Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE = 'Freight Fee' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE)   --1114
             UNION ALL
            Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE != 'Freight Fee' AND FEETYPE != 'UnPricedManualFreight' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE)


Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE = 'Freight Fee' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE)   --1114
             UNION ALL
            Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE != 'Freight Fee' AND FEETYPE != 'UnPricedManualFreight' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE)


SELECT Count(DISTINCT NI_STOCK) AS CountOfStocks, IL_LOCN, IM_CUST,
                      CASE WHEN Upper(substr(IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
                        ELSE 'F- Shelves'
                        END AS "Note",NULL,NULL,NULL,NULL
						FROM IL INNER JOIN NI  ON IL_LOCN = NI_LOCN
						INNER JOIN IM ON IM_STOCK = NI_STOCK
						WHERE IM_ACTIVE = 1
						AND NI_AVAIL_ACTUAL >= 1
						AND NI_STATUS <> 3
            AND IL_LOCN = 'S5C05-15'
						GROUP BY IL_LOCN, IM_CUST,IL_NOTE_2

select u.table_name,(Select Count(*) From u.table_name) from user_tables u where u.table_name LIKE 'TMP_%' order by u.table_name


Select (select table_name As T2 from user_tables where table_name LIKE 'TMP_%' order by table_name), Select Count(*) From
select table_name As T2 from user_tables where table_name LIKE 'TMP_%' order by table_name

CREATE TABLE TMP_TBL_COUNTS
(
  TABLE_NAME VARCHAR2(40)
, COUNT NUMBER
);


DECLARE
   CURSOR dept_cur IS
  /* SELECT deptno
     FROM dept
    ORDER BY deptno;*/
    select table_name from user_tables where table_name LIKE 'TMP_%' order by table_name;
   -- Employee cursor all employees for a dept number
   CURSOR emp_cur (v_dept_no TMP_TBL_COUNTS%ROWTYPE;) IS
   SELECT TABLE_NAME
     FROM emp
    WHERE deptno = v_dept_no;
BEGIN
   FOR dept_rec IN dept_cur LOOP
      DBMS_OUTPUT.put_line('Employees in Department '||TO_CHAR(dept_rec.deptno));

      FOR emp_rec IN emp_cur(dept_rec.deptno) LOOP
         DBMS_OUTPUT.put_line('...Employee is '||emp_rec.ename);
      END LOOP;

  END LOOP;
END;
/


declare
  type final_coll_typ is table of varchar2(100);
  l_final_coll final_coll_typ;
begin
  l_final_coll := final_coll_typ();
  for indx in 1..<count> loop

    <some processing logic here>

    for p in (select code from lookup_tbl where <some filter>) loop
      l_final_coll.extend(1);
      l_final_coll(l_final_coll.count) := p.code;
    end loop;
  end loop;

  dbms_output.put_line('Final size: ' || l_final_coll.count);
end;
/


declare
  type final_coll_typ is table of varchar2(100);
  l_final_coll final_coll_typ;
begin
  l_final_coll := final_coll_typ();
  for indx in 1..3 loop
    for p in (select code from lookup_tbl where code = 'Code ' || indx) loop
      l_final_coll.extend(1);
      l_final_coll(l_final_coll.count) := p.code;
    end loop;
  end loop;

  dbms_output.put_line('Final size: ' || l_final_coll.count);
end;
/


set pages 999;

col count format 999,999,999;
spool countlist.txt

select
   table_name AS "TBL",
   to_number(
   extractvalue(
      xmltype(
         dbms_xmlgen.getxml('select count(*) c from '||table_name))
    ,'/ROWSET/ROW/C')) AS "CNT"
from
   user_tables
where table_name LIKE 'TMP_%'
order by
   table_name;

spool off;

  **********************************************************************
  **********************************************************************


alter table  "PWIN175"."TMP_GROUP_CUST" rename column "CAMPAIGN" to "AREA"
alter table  "PWIN175"."TMP_GROUP_CUST" rename column "SPARE1" to "TERR"
alter table  "PWIN175"."TMP_GROUP_CUST" rename column "SPARE2" to "RMDBL2"

SELECT * FROM TMP_GROUP_CUST  WHERE sgroupcust = 'COLONIALFS'

Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE = 'Freight Fee' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE = 'Freight Fee' group by DESPNOTE)   --1114
             UNION ALL
            Select  *
                From TMP_ALL_FREIGHT_F
                WHERE FEETYPE != 'Freight Fee' AND FEETYPE != 'UnPricedManualFreight' AND rowid in
                (select max(rowid) from TMP_ALL_FREIGHT_F WHERE FEETYPE != 'Freight Fee' group by DESPNOTE)

Select Count(*) From TMP_ALL_FREIGHT_ALL WHERE PARENT LIKE 'AUDIO%'  AND FEETYPE != 'UnPricedManualFreight'

SELECT Count(*) FROM SD,SH WHERE SD_ORDER = SH_ORDER AND SH_ORDER = '   1797892'

SELECT Count(*) FROM IM WHERE IM_ACTIVE = 1 AND IM_CUST = 'AAPT'

SELECT * FROM SD WHERE Trim(SD_ORDER) IN ('1798461',
'1797618',
'1796707',
'1796706',
'1796686',
'1796586',
'1796561',
'1796555',
'1796553'
)


  **********************************************************************
  **********************************************************************


SD_EDIT_DATE = '13-Oct-2015' AND SD_EDIT_OP = 'KOR'

SELECT DISTINCT(RM_SOURCE) FROM RM ORDER BY RM_SOURCE Desc

SELECT Count(RM_CUST) FROM RM WHERE RM_SOURCE = 'BSPRINTNSW'   AND RM_ACTIVE = 1    AND RM_TYPE = 0

SELECT Count(RM_CUST) FROM RM WHERE RM_ANAL = '21VICP'   AND RM_ACTIVE = 1    AND RM_TYPE = 0

  **********************************************************************
  **********************************************************************

  --Now get all items with past warehouse items
  SELECT 
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE (e.NE_TRAN_TYPE = 1 or e.NE_TRAN_TYPE = 6) 
  AND (e.NE_DATE >= '01-AUG-2014' And e.NE_DATE <= '01-AUG-2016')
  AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
  AND e.NE_STRENGTH = 3
  AND i.IM_ACTIVE = 1
  --AND i.IM_STOCK = 'RTA45070085'
  Group By i.IM_STOCK
  
  UNION ALL
  
  
  
  --Now get all items with available stock
  SELECT 
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE n.NA_EXT_TYPE = 1210067
  AND (e.NE_AVAIL_ACTUAL >= '1') 
  AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
  AND e.NE_STRENGTH = 3
  AND i.IM_ACTIVE = 1
  --AND i.IM_STOCK = 'RTA45091000K'
  Group By i.IM_STOCK
  
  UNION ALL
  
  --Now get all kitset items with SOH as 99999 and Keep Levels no
  SELECT
  i.IM_STOCK As "Stock",
  NULL As "Avail",
  NULL As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM IM i 
  WHERE i.IM_XX_PLUM_STOCK_TYPE = 3
  AND i.IM_ACTIVE = 1
  --AND i.IM_STOCK = 'BL/0360'
  Group By i.IM_STOCK

  UNION ALL
  
  --Now get all download only items
  SELECT
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE i.IM_KEEP_LEVELs = 0
  AND i.IM_ACTIVE = 1
  AND TOTAL_SOH_BY_STOCK(i.IM_STOCK) > 99999
 -- AND i.IM_STOCK = 'BL/0360'
  Group By i.IM_STOCK;
  
  
  **********************************************************************
  **********************************************************************

  --Now get all items with past warehouse items
  SELECT 
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE (e.NE_TRAN_TYPE = 1 or e.NE_TRAN_TYPE = 6) 
  AND (e.NE_DATE >= '01-AUG-2014' And e.NE_DATE <= '01-AUG-2016')
  AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
  AND e.NE_STRENGTH = 3
  AND i.IM_ACTIVE = 1
  AND i.IM_STOCK = 'WOR0623'
  Group By i.IM_STOCK
  
  UNION ALL
  
  --Now get all items with available stock
  SELECT 
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE n.NA_EXT_TYPE = 1210067
  AND (e.NE_AVAIL_ACTUAL >= '1') 
  AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
  AND e.NE_STRENGTH = 3
  AND i.IM_ACTIVE = 1
  --AND i.IM_STOCK = 'RTA45091000K'
  Group By i.IM_STOCK
  
  UNION ALL
  
  --Now get all kitset items with SOH as 99999 and Keep Levels no
  SELECT
  i.IM_STOCK As "Stock",
  NULL As "Avail",
  NULL As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM IM i 
  WHERE i.IM_XX_PLUM_STOCK_TYPE = 3
  AND i.IM_ACTIVE = 1
  --AND i.IM_STOCK = 'BL/0360'
  Group By i.IM_STOCK

  UNION ALL
  
  --Now get all download only items
  SELECT
  i.IM_STOCK As "Stock",
  SUM(e.NE_AVAIL_ACTUAL) As "Avail",
  SUM(e.NE_QUANTITY) As "Qty",
  TOTAL_SOH_BY_STOCK(i.IM_STOCK) As "SOH"
  FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
        INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
        INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
  WHERE i.IM_KEEP_LEVELs = 0
  AND i.IM_ACTIVE = 1
  AND TOTAL_SOH_BY_STOCK(i.IM_STOCK) > 99999
 -- AND i.IM_STOCK = 'BL/0360'
  Group By i.IM_STOCK;

  
 UPDATE pwin175.IM
SET   IM_LEVEL_UNIT = 'BOX_OF_50',
		   IM_PRICE_UNIT = 'BOX_OF_50'
WHERE IM_STOCK = 'TEST - 1'


--Brand manager Updates
CREATE OR REPLACE VIEW ORDER_DUMP_TODAY AS
SELECT
`weborder`.`id_order`,
`vvv_client`.`cost_centres`,
`weborder`.`po`,
`weborder`.`username`,
`vvv_client`.`name`,
`vvv_client`.`code`,
`weborder`.`date`,
`weborder_item`.`sku`,
`weborder_item`.`name` As 'description',
`weborder_item`.`size`,
`weborder_item`.`colour`,
`weborder_item`.`unit_size`,
`weborder_item`.`qty`,
`weborder_item`.`price`,
`weborder`.`ship_first_name`,
`weborder`.`ship_last_name`,
`weborder`.`ship_company`,
`weborder`.`ship_phone`,
`weborder`.`ship_phone`,
`weborder`.`ship_street1`,
`weborder`.`ship_street2`,
`weborder`.`ship_street3`,
`weborder`.`ship_suburb`,
`weborder`.`ship_state`,
`weborder`.`ship_postcode`,
`weborder`.`freight`,
`weborder`.`estimate_freight`,
`surcharge`,`ship_email`
FROM `weborder` INNER JOIN  `vvv_client` ON (`weborder`.`id_client` =  `vvv_client`.`id_client`)
INNER JOIN `weborder_item` ON (`weborder`.`id_order` = `weborder_item`.`id_order`)
AND `weborder`.`id_order` IN (131961,
131979,
131988,
132101,
132972,
133163,
133168,
133779,
133783,
133784,
133789,
133802,
133803,
133819,
133824,
133830,
133842,
133867,
133876,
134024,
134030,
134041,
134057,
134064,
134124,
134134,
134137,
134149,
134342,
134343,
134344,
134345,
134346,
134347,
134348,
134349,
134350,
134351)
WHERE  `date` = CURDATE() 
INTO OUTFILE '\\xasudc01\Data\PWIN17P\PWCIMPORT\pwc_promote_daily_orders.csv' 
FIELDS ENCLOSED BY '"' 
TERMINATED BY ';' 
ESCAPED BY '"' 
LINES TERMINATED BY '\r\n';
/


select *
FROM  TMP_ALL_FREIGHT_ALL t INNER JOIN TMP_ALL_FREIGHT_ALL t2 on t.ordernum = t2.ordernum
WHERE t.description <> t2.description
AND 
t.ordernum = '   1872771' --and rownum =1
GROUP BY t.PICKSLIP--,t.description,t.ordernum, t.countofstocks
--AND t.ordernum = t2.ordernum;


select t.description,  t.ordernum from (
  select t.description,t.ordernum, 
  row_number() over (partition by t.description order by t.ordernum asc) as rownumber 
  from TMP_ALL_FREIGHT_ALL t
) foo
where rownumber = 1

select col1, col2 from (
  select col1, col2, 
  row_number() over (partition by col1 order by col2 asc) as rownumber 
  from tmp
) foo
where rownumber = 1

SELECT department_id, last_name, salary, hire_date, 
   FIRST_VALUE(last_name) OVER
   (ORDER BY salary ASC, hire_date ROWS UNBOUNDED PRECEDING) AS fv
   FROM (SELECT * FROM employees 
   WHERE department_id = 90 ORDER BY employee_id DESC)
   ORDER BY department_id, last_name, salary, hire_date;
   
   
SELECT * FROM TMP_ALL_FREIGHT_ALL
WHERE ROWID IN ( SELECT MAX(ROWID) FROM TMP_ALL_FREIGHT_ALL GROUP BY description ) AND ordernum = '   1872771' 


SELECT MAX(ROWID) FROM TMP_ALL_FREIGHT_ALL GROUP BY description


//Back order stock query
Select SD_ORDER, SH_CUST,SD_ADD_DATE, total_soh_by_stock(SD_STOCK) As "StockOnHand", SD_STATUS From SD, SH Where SD_ORDER = SH_ORDER AND SH_CUST LIKE 'K1%' AND SD_QTY_BACK > 1 AND SD_ADD_DATE >= '01-Jan-2016'


declare
  TYPE curtype IS REF CURSOR;
  src_cur      curtype;
  curid        NUMBER;
  namevar  VARCHAR2(50);
  numvar   NUMBER;
  datevar  DATE;
  desctab  DBMS_SQL.DESC_TAB;
  colcnt   NUMBER;
  dsql varchar2(1000) := 'select card_no from card_table where rownum = 1';
begin
  OPEN src_cur FOR dsql;

  -- Switch from native dynamic SQL to DBMS_SQL package.
  curid := DBMS_SQL.TO_CURSOR_NUMBER(src_cur);
  DBMS_SQL.DESCRIBE_COLUMNS(curid, colcnt, desctab);

  -- Define columns.
  FOR i IN 1 .. colcnt LOOP
    IF desctab(i).col_type = 2 THEN
      DBMS_SQL.DEFINE_COLUMN(curid, i, numvar);
    ELSIF desctab(i).col_type = 12 THEN
      DBMS_SQL.DEFINE_COLUMN(curid, i, datevar);
    ELSE
      DBMS_SQL.DEFINE_COLUMN(curid, i, namevar, 50);
    END IF;
  END LOOP;

  -- Fetch rows with DBMS_SQL package.
  WHILE DBMS_SQL.FETCH_ROWS(curid) > 0 LOOP
    FOR i IN 1 .. colcnt LOOP
      IF (desctab(i).col_type = 1) THEN
        DBMS_SQL.COLUMN_VALUE(curid, i, namevar);
        dbms_output.put_line(namevar);
      ELSIF (desctab(i).col_type = 2) THEN
        DBMS_SQL.COLUMN_VALUE(curid, i, numvar);
        dbms_output.put_line(numvar);
      ELSIF (desctab(i).col_type = 12) THEN
        DBMS_SQL.COLUMN_VALUE(curid, i, datevar);
        dbms_output.put_line(datevar);
      END IF;
    END LOOP;
  END LOOP;

  DBMS_SQL.CLOSE_CURSOR(curid);

end;

declare
  sCustomerCode VARCHAR2(20) := 'RTA';
  QueryType     VARCHAR2(20) := 'DEV';
  SQLQuery2 VARCHAR2(2560) := 'SELECT * FROM ' 
            || QueryType || '_ALL_FREIGHT_ALL t'  ||' WHERE t.parent = ' 
            || '''' || sCustomerCode || '''';
  dbms_output.put_line(SQLQuery2);
begin
  Execute Immediate SQLQuery2 using QueryType,sCustomerCode;
  IF SQL%ROWCOUNT > 0 THEN
    DBMS_OUTPUT.PUT_LINE('Run for: ' || sCustomerCode 
                        || ' = ' || QueryType);
  END IF;
end;



SQL> declare
  2  
  3    CURSOR my_cursor IS SELECT ename, empno FROM emp;
  4    
  5    my_tab_rec my_cursor%rowtype;
  6  
  7    type tab_type is table of my_cursor%rowtype;
  8  
  9    tab tab_type;
 10  
 11  BEGIN
 12  
 13    OPEN my_cursor;
 14    LOOP
 15       FETCH my_cursor INTO my_tab_rec;
 16       EXIT WHEN my_cursor%NOTFOUND;
 17    END LOOP;
 18    CLOSE my_cursor;
 19  
 20    OPEN my_cursor;
 21       FETCH my_cursor BULK COLLECT INTO tab;
 22    CLOSE my_cursor;
 23  
 24  END;
 25  /


SQL> CREATE OR REPLACE PROCEDURE TEST
2 IS
3 TYPE t_rec IS table of tab1%rowtype index by binary_integer;
4 
5 
6 my_tab_rec t_rec;
7 
8 
9 BEGIN
10 select col1, col2 bulk collect into my_tab_rec from tab1;
11 
12 for i in my_tab_rec.first..my_tab_rec.last
13 loop
14 dbms_output.put_line (my_tab_rec(i).col1);
15 end loop;
16 
17 END;
18 /





CREATE OR REPLACE PROCEDURE salary_raise (raise_percent NUMBER, job VARCHAR2) IS
    TYPE loc_array_type IS TABLE OF VARCHAR2(40)
        INDEX BY binary_integer;
    dml_str VARCHAR2        (200);
    loc_array    loc_array_type;
BEGIN
    -- bulk fetch the list of office locations
    SELECT location BULK COLLECT INTO loc_array
        FROM offices;
    -- for each location, give a raise to employees with the given 'job' 
    FOR i IN loc_array.first..loc_array.last LOOP
        dml_str := 'UPDATE emp_' || loc_array(i) 
        || ' SET sal = sal * (1+(:raise_percent/100))'
        || ' WHERE job = :job_title';
    EXECUTE IMMEDIATE dml_str USING raise_percent, job;
    END LOOP;
END;
/
SHOW ERRORS;
dddd

Select SD_STOCK, SH_SPARE_STR_5,SH_CUST,SH_NOTE_1,SH_CUST_REF,SH_NOTE_2, SH_ADDRESS,SH_CITY,SH_ADD_DATE  From SD,SH 
Where SD_ORDER = SH_ORDER
AND SD_ORDER in (1982799,
1982449,
1982437,



--Superpartners Query for EOM
Select f1.DESPDATE,
       f1.ORDERNUM,
       f1.DESPNOTE,
       f1.CUSTOMER,
       f1.ATTENTIONTO,
       f1.ADDRESS,
       f1.ADDRESS2,
       f1.SUBURB,
       f1.STATE,
       f1.POSTCODE,
       f1.ITEM,
       f1.DESCRIPTION,
       f1.QTY,
       CASE   WHEN f1.FEETYPE like 'Stock' AND LAG(f1.DESPNOTE, 1, 0) OVER (ORDER BY f1.DESPNOTE) != f1.DESPNOTE THEN (Select f2.SELLEXCL From TMP_ALL_FEES_F f2 Where f2.ORDERNUM = f1.ORDERNUM AND f2.FEETYPE = 'Pick Fee' ) --As "Line Charge"-- AND LAG(FEETYPE, 1, 0) OVER (ORDER BY FEETYPE) = 'Pick Fee'  THEN LEAD(SELLEXCL, 2, 0) OVER (ORDER BY SELLEXCL)
              ELSE 0
              END AS "Line Charge",
      CASE   WHEN f1.FEETYPE like 'Stock' AND LAG(f1.DESPNOTE, 1, 0) OVER (ORDER BY f1.DESPNOTE) != f1.DESPNOTE THEN (Select f2.SELLEXCL From TMP_ALL_FEES_F f2 Where f2.ORDERNUM = f1.ORDERNUM AND f2.FEETYPE = 'Handeling Fee is ' ) --As "Line Charge"-- AND LAG(FEETYPE, 1, 0) OVER (ORDER BY FEETYPE) = 'Pick Fee'  THEN LEAD(SELLEXCL, 2, 0) OVER (ORDER BY SELLEXCL)
              ELSE 0
              END AS "Order Despatch Charge",
      CASE   WHEN f1.FEETYPE like 'Stock' AND LAG(f1.DESPNOTE, 1, 0) OVER (ORDER BY f1.DESPNOTE) != f1.DESPNOTE THEN (Select f2.SELLEXCL From TMP_ALL_FEES_F f2 Where f2.ORDERNUM = f1.ORDERNUM AND (f2.FEETYPE like 'Freight Fee' OR f2.FEETYPE like 'Manual Freight Fee') ) --As "Line Charge"-- AND LAG(FEETYPE, 1, 0) OVER (ORDER BY FEETYPE) = 'Pick Fee'  THEN LEAD(SELLEXCL, 2, 0) OVER (ORDER BY SELLEXCL)
              ELSE 0
              END AS "Freight Charge"
From TMP_ALL_FEES_F f1
Where f1.FEETYPE = 'Stock'
--exclude addresses Casselden Place and/or Lonsdale Street - using SH_ADDRESS and SH_SUBURB --- run a seperate query to count despatches per day and apply a flat rate charge once only
--Also need to build query to work out cartons based on the following rates $2.43 per carton & 38.80 per pallet thereafetr 14.55 per pallet
--calc is 64 cartons per pallet eg 707 / 64 = 11.05 pallets
-- billed at 1 x pallet @ 38.80
--                10 x pallets @ 14.55
--   			   3 x Cartons @ 2.43
AND ;
