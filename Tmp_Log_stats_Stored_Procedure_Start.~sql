CREATE OR REPLACE PROCEDURE Tmp_Log_stats AS
	start_date VARCHAR(20);
	end_date  VARCHAR(20);
	nCheckpoint  NUMBER;
BEGIN

  nCheckpoint := 1;
  EXECUTE IMMEDIATE	'TRUNCATE  TABLE Tmp_Log_stats';


  nCheckpoint := 2;
  EXECUTE IMMEDIATE 'INSERT INTO Tmp_Log_stats (sWarehouse, sCust, nTotal, sType)

											SELECT  (CASE
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
														WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
														ELSE 'NOLOCN'
														END) AS Warehouse,
														sGroupCust,
														Count(*) AS Total,
														'A- Orders' AS "Type"
											FROM SH h INNER JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
												 INNER JOIN SD d ON d.SD_ORDER = h.SH_ORDER
												 INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
											WHERE h.SH_ADD_DATE >= :start_date AND h.SH_ADD_DATE <= :end_date
											AND h.SH_STATUS <> 3
											AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
											AND d.SD_DISPLAY = 1
											AND r2.RM_ACTIVE = 1   --This was the problem
											GROUP BY ROLLUP (
															( CASE
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'S' THEN 'SYDNEY'
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'H' THEN 'SYDNEY'
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'R' THEN 'SYDNEY'
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
															  WHEN Upper(SubStr(d.SD_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
															  ELSE 'NOLOCN'
															  END
															),
															sGroupCust
															)

											--ORDER BY 1,2 ASC



											UNION ALL

											/*Total Despatches by Month all custs grouped by warehouse/grouped cust */  --  1.5s  Total Count 15381

											SELECT (
													  CASE
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'S' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'H' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'R' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
														ELSE 'NOLOCN'
														END) AS Warehouse,
														 sGroupCust,
														Count(*) AS Total,
														'B- Despatches' AS "Type"
											FROM  PWIN175.SL s INNER JOIN SH h ON s.SL_ORDER = h.SH_ORDER
												  LEFT JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
												  --RIGHT JOIN SD d ON d.SD_ORDER = h.SH_ORDER
												  INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
												  INNER JOIN IL l ON l.IL_LOCN = s.SL_LOCN
												  INNER JOIN ST t ON t.ST_PICK = s.SL_PICK
											WHERE s.SL_EDIT_DATE >= :start_date AND s.SL_EDIT_DATE <= :end_date
											AND s.SL_LINE = 1
											AND s.SL_PSLIP IS NOT NULL
											AND h.SH_STATUS <> 3
											AND h.SH_CAMPAIGN NOT IN( 'ADMIN','OBSOLETE')
											AND r2.RM_ACTIVE = 1   --This was the problem
											GROUP BY ROLLUP ((CASE
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'S' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'H' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'R' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
														ELSE 'NOLOCN'
														END),
														 sGroupCust )



											UNION ALL

											/*Total Lines by Month all custs grouped by warehouse/top level grouped cust */  --  7.8s   total count 62068

											SELECT (CASE
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'S' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'H' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'R' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
														ELSE 'NOLOCN'
														END) AS Warehouse,
														sGroupCust,
														Count(*) AS Total,
														'C- Lines' AS "Type"
											FROM  PWIN175.SL s INNER JOIN SH h ON s.SL_ORDER = h.SH_ORDER
												  LEFT JOIN Tmp_Group_Cust r ON r.sCust = h.SH_CUST
												  --RIGHT JOIN SD d ON d.SD_ORDER = h.SH_ORDER
												  INNER JOIN RM r2 ON r2.RM_CUST = h.SH_CUST
												  INNER JOIN IL l ON l.IL_LOCN = s.SL_LOCN
												  INNER JOIN ST t ON t.ST_PICK = s.SL_PICK
											WHERE s.SL_EDIT_DATE >= :start_date AND s.SL_EDIT_DATE <= :end_date
											AND s.SL_PSLIP IS NOT NULL
											AND h.SH_CAMPAIGN NOT LIKE 'ADMIN'
											AND h.SH_CAMPAIGN NOT LIKE 'OBSOLETE'
											AND r2.RM_ACTIVE = 1   --This was the problem
											GROUP BY ROLLUP ((CASE
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'S' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'H' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'R' THEN 'SYDNEY'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'M' THEN 'MELBOURNE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'O' THEN 'OBSOLETE'
														WHEN Upper(SubStr(s.SL_LOCN,0,1)) = 'D' THEN 'DMMETLIFE'
														ELSE 'NOLOCN'
														END),sGroupCust)



											UNION ALL

											/*This should list Total receipts by type grouped by warehouse for all customers */ --1.1s   Total is 2643
											SELECT l.IL_IN_LOCN AS Warehouse,
												   i.IM_CUST AS Cust,
												   Count(e.NE_ENTRY) AS Total,
												   'D- Receipts'  AS "Type"
											FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
													   INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
													   INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
											WHERE n.NA_EXT_TYPE = 1210067
											AND   l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
											AND   IL_PHYSICAL = 1
											AND   e.NE_QUANTITY >= '1'
											AND   e.NE_TRAN_TYPE =  1
											AND   e.NE_STRENGTH = 3
											AND   (e.NE_STATUS = 1 OR e.NE_STATUS = 3)
											AND   e.NE_DATE >= :start_date AND e.NE_DATE <= :end_date
											GROUP BY ROLLUP (l.IL_IN_LOCN,i.IM_CUST)
											--ORDER BY 2,1


											UNION ALL

											/*This should list Total spaces by type grouped by warehouse for all customers */ --13.00s Total is 15131
											SELECT
												   (CASE
													WHEN l.IL_IN_LOCN IS NOT NULL THEN l.IL_IN_LOCN
													WHEN l.IL_IN_LOCN IS NULL THEN l.IL_LOCN
													END) AS Warehouse,
												   r.sGroupCust AS Cust,
												   Count(DISTINCT l.IL_LOCN) AS Total,  -- test a self join to rid the distinct
												   (CASE WHEN Upper(substr(l.IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
																									ELSE 'F- Shelves'
													END) AS "Type"
											FROM  NA n INNER JOIN IL l ON l.IL_UID = n.NA_EXT_KEY
													   INNER JOIN NE e ON e.NE_ACCOUNT = n.NA_ACCOUNT
													   INNER JOIN IM i ON i.IM_STOCK = n.NA_STOCK
													   LEFT JOIN Tmp_Group_Cust r ON r.sGroupCust = i.IM_CUST
											WHERE n.NA_EXT_TYPE = 1210067
											AND e.NE_AVAIL_ACTUAL >= '1'
											AND l.IL_IN_LOCN NOT IN ('OBSOLETEMEL','OBSOLETESYD','PASTHISTORY', 'CANBERRA')
											AND e.NE_STATUS =  1
											AND e.NE_STRENGTH = 3
											--AND i.IM_CUST = :cust
											GROUP BY ROLLUP ((CASE
															  WHEN l.IL_IN_LOCN IS NOT NULL THEN l.IL_IN_LOCN
															  WHEN l.IL_IN_LOCN IS NULL THEN l.IL_LOCN
															  END),r.sGroupCust, (CASE WHEN Upper(substr(l.IL_NOTE_2,0,1)) = 'Y' THEN 'E- Pallets'
																											  ELSE 'F- Shelves'
															  END) )
											ORDER BY 1,4  
											';




  DBMS_OUTPUT.PUT_LINE('Successfully dropped, recreated AND populated Tmp_Log_stats');


  RETURN;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Tmp_Log_stats failed at checkpoint ' || nCheckpoint ||
                         ' with error ' || SQLCODE || ' : ' || SQLERRM);
    RAISE;
END Tmp_Log_stats;


